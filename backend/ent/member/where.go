// Code generated by entc, DO NOT EDIT.

package member

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/matsuokashuhei/landin/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// Number applies equality check predicate on the "number" field. It's identical to NumberEQ.
func Number(v int) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNumber), v))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// Kana applies equality check predicate on the "kana" field. It's identical to KanaEQ.
func Kana(v string) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldKana), v))
	})
}

// DateOfBirth applies equality check predicate on the "date_of_birth" field. It's identical to DateOfBirthEQ.
func DateOfBirth(v time.Time) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDateOfBirth), v))
	})
}

// PhoneNumber applies equality check predicate on the "phone_number" field. It's identical to PhoneNumberEQ.
func PhoneNumber(v string) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPhoneNumber), v))
	})
}

// Email applies equality check predicate on the "email" field. It's identical to EmailEQ.
func Email(v string) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEmail), v))
	})
}

// DateOfAdmission applies equality check predicate on the "date_of_admission" field. It's identical to DateOfAdmissionEQ.
func DateOfAdmission(v time.Time) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDateOfAdmission), v))
	})
}

// DateOfWithdrawal applies equality check predicate on the "date_of_withdrawal" field. It's identical to DateOfWithdrawalEQ.
func DateOfWithdrawal(v time.Time) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDateOfWithdrawal), v))
	})
}

// Memo applies equality check predicate on the "memo" field. It's identical to MemoEQ.
func Memo(v string) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMemo), v))
	})
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.Member {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Member(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.Member {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Member(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateTime), v))
	})
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.Member {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Member(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.Member {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Member(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateTime), v))
	})
}

// NumberEQ applies the EQ predicate on the "number" field.
func NumberEQ(v int) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNumber), v))
	})
}

// NumberNEQ applies the NEQ predicate on the "number" field.
func NumberNEQ(v int) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldNumber), v))
	})
}

// NumberIn applies the In predicate on the "number" field.
func NumberIn(vs ...int) predicate.Member {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Member(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldNumber), v...))
	})
}

// NumberNotIn applies the NotIn predicate on the "number" field.
func NumberNotIn(vs ...int) predicate.Member {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Member(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldNumber), v...))
	})
}

// NumberGT applies the GT predicate on the "number" field.
func NumberGT(v int) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldNumber), v))
	})
}

// NumberGTE applies the GTE predicate on the "number" field.
func NumberGTE(v int) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldNumber), v))
	})
}

// NumberLT applies the LT predicate on the "number" field.
func NumberLT(v int) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldNumber), v))
	})
}

// NumberLTE applies the LTE predicate on the "number" field.
func NumberLTE(v int) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldNumber), v))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Member {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Member(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Member {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Member(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// KanaEQ applies the EQ predicate on the "kana" field.
func KanaEQ(v string) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldKana), v))
	})
}

// KanaNEQ applies the NEQ predicate on the "kana" field.
func KanaNEQ(v string) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldKana), v))
	})
}

// KanaIn applies the In predicate on the "kana" field.
func KanaIn(vs ...string) predicate.Member {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Member(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldKana), v...))
	})
}

// KanaNotIn applies the NotIn predicate on the "kana" field.
func KanaNotIn(vs ...string) predicate.Member {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Member(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldKana), v...))
	})
}

// KanaGT applies the GT predicate on the "kana" field.
func KanaGT(v string) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldKana), v))
	})
}

// KanaGTE applies the GTE predicate on the "kana" field.
func KanaGTE(v string) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldKana), v))
	})
}

// KanaLT applies the LT predicate on the "kana" field.
func KanaLT(v string) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldKana), v))
	})
}

// KanaLTE applies the LTE predicate on the "kana" field.
func KanaLTE(v string) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldKana), v))
	})
}

// KanaContains applies the Contains predicate on the "kana" field.
func KanaContains(v string) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldKana), v))
	})
}

// KanaHasPrefix applies the HasPrefix predicate on the "kana" field.
func KanaHasPrefix(v string) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldKana), v))
	})
}

// KanaHasSuffix applies the HasSuffix predicate on the "kana" field.
func KanaHasSuffix(v string) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldKana), v))
	})
}

// KanaEqualFold applies the EqualFold predicate on the "kana" field.
func KanaEqualFold(v string) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldKana), v))
	})
}

// KanaContainsFold applies the ContainsFold predicate on the "kana" field.
func KanaContainsFold(v string) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldKana), v))
	})
}

// GenderEQ applies the EQ predicate on the "gender" field.
func GenderEQ(v Gender) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGender), v))
	})
}

// GenderNEQ applies the NEQ predicate on the "gender" field.
func GenderNEQ(v Gender) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldGender), v))
	})
}

// GenderIn applies the In predicate on the "gender" field.
func GenderIn(vs ...Gender) predicate.Member {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Member(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldGender), v...))
	})
}

// GenderNotIn applies the NotIn predicate on the "gender" field.
func GenderNotIn(vs ...Gender) predicate.Member {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Member(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldGender), v...))
	})
}

// DateOfBirthEQ applies the EQ predicate on the "date_of_birth" field.
func DateOfBirthEQ(v time.Time) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDateOfBirth), v))
	})
}

// DateOfBirthNEQ applies the NEQ predicate on the "date_of_birth" field.
func DateOfBirthNEQ(v time.Time) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDateOfBirth), v))
	})
}

// DateOfBirthIn applies the In predicate on the "date_of_birth" field.
func DateOfBirthIn(vs ...time.Time) predicate.Member {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Member(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDateOfBirth), v...))
	})
}

// DateOfBirthNotIn applies the NotIn predicate on the "date_of_birth" field.
func DateOfBirthNotIn(vs ...time.Time) predicate.Member {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Member(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDateOfBirth), v...))
	})
}

// DateOfBirthGT applies the GT predicate on the "date_of_birth" field.
func DateOfBirthGT(v time.Time) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDateOfBirth), v))
	})
}

// DateOfBirthGTE applies the GTE predicate on the "date_of_birth" field.
func DateOfBirthGTE(v time.Time) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDateOfBirth), v))
	})
}

// DateOfBirthLT applies the LT predicate on the "date_of_birth" field.
func DateOfBirthLT(v time.Time) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDateOfBirth), v))
	})
}

// DateOfBirthLTE applies the LTE predicate on the "date_of_birth" field.
func DateOfBirthLTE(v time.Time) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDateOfBirth), v))
	})
}

// DateOfBirthIsNil applies the IsNil predicate on the "date_of_birth" field.
func DateOfBirthIsNil() predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDateOfBirth)))
	})
}

// DateOfBirthNotNil applies the NotNil predicate on the "date_of_birth" field.
func DateOfBirthNotNil() predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDateOfBirth)))
	})
}

// PhoneNumberEQ applies the EQ predicate on the "phone_number" field.
func PhoneNumberEQ(v string) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPhoneNumber), v))
	})
}

// PhoneNumberNEQ applies the NEQ predicate on the "phone_number" field.
func PhoneNumberNEQ(v string) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPhoneNumber), v))
	})
}

// PhoneNumberIn applies the In predicate on the "phone_number" field.
func PhoneNumberIn(vs ...string) predicate.Member {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Member(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPhoneNumber), v...))
	})
}

// PhoneNumberNotIn applies the NotIn predicate on the "phone_number" field.
func PhoneNumberNotIn(vs ...string) predicate.Member {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Member(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPhoneNumber), v...))
	})
}

// PhoneNumberGT applies the GT predicate on the "phone_number" field.
func PhoneNumberGT(v string) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPhoneNumber), v))
	})
}

// PhoneNumberGTE applies the GTE predicate on the "phone_number" field.
func PhoneNumberGTE(v string) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPhoneNumber), v))
	})
}

// PhoneNumberLT applies the LT predicate on the "phone_number" field.
func PhoneNumberLT(v string) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPhoneNumber), v))
	})
}

// PhoneNumberLTE applies the LTE predicate on the "phone_number" field.
func PhoneNumberLTE(v string) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPhoneNumber), v))
	})
}

// PhoneNumberContains applies the Contains predicate on the "phone_number" field.
func PhoneNumberContains(v string) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPhoneNumber), v))
	})
}

// PhoneNumberHasPrefix applies the HasPrefix predicate on the "phone_number" field.
func PhoneNumberHasPrefix(v string) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPhoneNumber), v))
	})
}

// PhoneNumberHasSuffix applies the HasSuffix predicate on the "phone_number" field.
func PhoneNumberHasSuffix(v string) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPhoneNumber), v))
	})
}

// PhoneNumberIsNil applies the IsNil predicate on the "phone_number" field.
func PhoneNumberIsNil() predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPhoneNumber)))
	})
}

// PhoneNumberNotNil applies the NotNil predicate on the "phone_number" field.
func PhoneNumberNotNil() predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPhoneNumber)))
	})
}

// PhoneNumberEqualFold applies the EqualFold predicate on the "phone_number" field.
func PhoneNumberEqualFold(v string) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPhoneNumber), v))
	})
}

// PhoneNumberContainsFold applies the ContainsFold predicate on the "phone_number" field.
func PhoneNumberContainsFold(v string) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPhoneNumber), v))
	})
}

// EmailEQ applies the EQ predicate on the "email" field.
func EmailEQ(v string) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEmail), v))
	})
}

// EmailNEQ applies the NEQ predicate on the "email" field.
func EmailNEQ(v string) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEmail), v))
	})
}

// EmailIn applies the In predicate on the "email" field.
func EmailIn(vs ...string) predicate.Member {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Member(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldEmail), v...))
	})
}

// EmailNotIn applies the NotIn predicate on the "email" field.
func EmailNotIn(vs ...string) predicate.Member {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Member(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldEmail), v...))
	})
}

// EmailGT applies the GT predicate on the "email" field.
func EmailGT(v string) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEmail), v))
	})
}

// EmailGTE applies the GTE predicate on the "email" field.
func EmailGTE(v string) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEmail), v))
	})
}

// EmailLT applies the LT predicate on the "email" field.
func EmailLT(v string) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEmail), v))
	})
}

// EmailLTE applies the LTE predicate on the "email" field.
func EmailLTE(v string) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEmail), v))
	})
}

// EmailContains applies the Contains predicate on the "email" field.
func EmailContains(v string) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldEmail), v))
	})
}

// EmailHasPrefix applies the HasPrefix predicate on the "email" field.
func EmailHasPrefix(v string) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldEmail), v))
	})
}

// EmailHasSuffix applies the HasSuffix predicate on the "email" field.
func EmailHasSuffix(v string) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldEmail), v))
	})
}

// EmailIsNil applies the IsNil predicate on the "email" field.
func EmailIsNil() predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldEmail)))
	})
}

// EmailNotNil applies the NotNil predicate on the "email" field.
func EmailNotNil() predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldEmail)))
	})
}

// EmailEqualFold applies the EqualFold predicate on the "email" field.
func EmailEqualFold(v string) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldEmail), v))
	})
}

// EmailContainsFold applies the ContainsFold predicate on the "email" field.
func EmailContainsFold(v string) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldEmail), v))
	})
}

// DateOfAdmissionEQ applies the EQ predicate on the "date_of_admission" field.
func DateOfAdmissionEQ(v time.Time) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDateOfAdmission), v))
	})
}

// DateOfAdmissionNEQ applies the NEQ predicate on the "date_of_admission" field.
func DateOfAdmissionNEQ(v time.Time) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDateOfAdmission), v))
	})
}

// DateOfAdmissionIn applies the In predicate on the "date_of_admission" field.
func DateOfAdmissionIn(vs ...time.Time) predicate.Member {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Member(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDateOfAdmission), v...))
	})
}

// DateOfAdmissionNotIn applies the NotIn predicate on the "date_of_admission" field.
func DateOfAdmissionNotIn(vs ...time.Time) predicate.Member {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Member(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDateOfAdmission), v...))
	})
}

// DateOfAdmissionGT applies the GT predicate on the "date_of_admission" field.
func DateOfAdmissionGT(v time.Time) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDateOfAdmission), v))
	})
}

// DateOfAdmissionGTE applies the GTE predicate on the "date_of_admission" field.
func DateOfAdmissionGTE(v time.Time) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDateOfAdmission), v))
	})
}

// DateOfAdmissionLT applies the LT predicate on the "date_of_admission" field.
func DateOfAdmissionLT(v time.Time) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDateOfAdmission), v))
	})
}

// DateOfAdmissionLTE applies the LTE predicate on the "date_of_admission" field.
func DateOfAdmissionLTE(v time.Time) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDateOfAdmission), v))
	})
}

// DateOfWithdrawalEQ applies the EQ predicate on the "date_of_withdrawal" field.
func DateOfWithdrawalEQ(v time.Time) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDateOfWithdrawal), v))
	})
}

// DateOfWithdrawalNEQ applies the NEQ predicate on the "date_of_withdrawal" field.
func DateOfWithdrawalNEQ(v time.Time) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDateOfWithdrawal), v))
	})
}

// DateOfWithdrawalIn applies the In predicate on the "date_of_withdrawal" field.
func DateOfWithdrawalIn(vs ...time.Time) predicate.Member {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Member(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDateOfWithdrawal), v...))
	})
}

// DateOfWithdrawalNotIn applies the NotIn predicate on the "date_of_withdrawal" field.
func DateOfWithdrawalNotIn(vs ...time.Time) predicate.Member {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Member(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDateOfWithdrawal), v...))
	})
}

// DateOfWithdrawalGT applies the GT predicate on the "date_of_withdrawal" field.
func DateOfWithdrawalGT(v time.Time) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDateOfWithdrawal), v))
	})
}

// DateOfWithdrawalGTE applies the GTE predicate on the "date_of_withdrawal" field.
func DateOfWithdrawalGTE(v time.Time) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDateOfWithdrawal), v))
	})
}

// DateOfWithdrawalLT applies the LT predicate on the "date_of_withdrawal" field.
func DateOfWithdrawalLT(v time.Time) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDateOfWithdrawal), v))
	})
}

// DateOfWithdrawalLTE applies the LTE predicate on the "date_of_withdrawal" field.
func DateOfWithdrawalLTE(v time.Time) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDateOfWithdrawal), v))
	})
}

// DateOfWithdrawalIsNil applies the IsNil predicate on the "date_of_withdrawal" field.
func DateOfWithdrawalIsNil() predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDateOfWithdrawal)))
	})
}

// DateOfWithdrawalNotNil applies the NotNil predicate on the "date_of_withdrawal" field.
func DateOfWithdrawalNotNil() predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDateOfWithdrawal)))
	})
}

// MemoEQ applies the EQ predicate on the "memo" field.
func MemoEQ(v string) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMemo), v))
	})
}

// MemoNEQ applies the NEQ predicate on the "memo" field.
func MemoNEQ(v string) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMemo), v))
	})
}

// MemoIn applies the In predicate on the "memo" field.
func MemoIn(vs ...string) predicate.Member {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Member(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMemo), v...))
	})
}

// MemoNotIn applies the NotIn predicate on the "memo" field.
func MemoNotIn(vs ...string) predicate.Member {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Member(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMemo), v...))
	})
}

// MemoGT applies the GT predicate on the "memo" field.
func MemoGT(v string) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMemo), v))
	})
}

// MemoGTE applies the GTE predicate on the "memo" field.
func MemoGTE(v string) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMemo), v))
	})
}

// MemoLT applies the LT predicate on the "memo" field.
func MemoLT(v string) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMemo), v))
	})
}

// MemoLTE applies the LTE predicate on the "memo" field.
func MemoLTE(v string) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMemo), v))
	})
}

// MemoContains applies the Contains predicate on the "memo" field.
func MemoContains(v string) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldMemo), v))
	})
}

// MemoHasPrefix applies the HasPrefix predicate on the "memo" field.
func MemoHasPrefix(v string) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldMemo), v))
	})
}

// MemoHasSuffix applies the HasSuffix predicate on the "memo" field.
func MemoHasSuffix(v string) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldMemo), v))
	})
}

// MemoIsNil applies the IsNil predicate on the "memo" field.
func MemoIsNil() predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldMemo)))
	})
}

// MemoNotNil applies the NotNil predicate on the "memo" field.
func MemoNotNil() predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldMemo)))
	})
}

// MemoEqualFold applies the EqualFold predicate on the "memo" field.
func MemoEqualFold(v string) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldMemo), v))
	})
}

// MemoContainsFold applies the ContainsFold predicate on the "memo" field.
func MemoContainsFold(v string) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldMemo), v))
	})
}

// HasMembersClasses applies the HasEdge predicate on the "members_classes" edge.
func HasMembersClasses() predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(MembersClassesTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, MembersClassesTable, MembersClassesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMembersClassesWith applies the HasEdge predicate on the "members_classes" edge with a given conditions (other predicates).
func HasMembersClassesWith(preds ...predicate.MembersClass) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(MembersClassesInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, MembersClassesTable, MembersClassesColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Member) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Member) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Member) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		p(s.Not())
	})
}
