// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/matsuokashuhei/landin/ent/instructor"
)

// Instructor is the model entity for the Instructor schema.
type Instructor struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Kana holds the value of the "kana" field.
	Kana string `json:"kana,omitempty"`
	// Biography holds the value of the "biography" field.
	Biography string `json:"biography,omitempty"`
	// PhoneNumber holds the value of the "phone_number" field.
	PhoneNumber string `json:"phone_number,omitempty"`
	// Email holds the value of the "email" field.
	Email string `json:"email,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the InstructorQuery when eager-loading is set.
	Edges InstructorEdges `json:"edges"`
}

// InstructorEdges holds the relations/edges for other nodes in the graph.
type InstructorEdges struct {
	// Classes holds the value of the classes edge.
	Classes []*Class `json:"classes,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ClassesOrErr returns the Classes value or an error if the edge
// was not loaded in eager-loading.
func (e InstructorEdges) ClassesOrErr() ([]*Class, error) {
	if e.loadedTypes[0] {
		return e.Classes, nil
	}
	return nil, &NotLoadedError{edge: "classes"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Instructor) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case instructor.FieldID:
			values[i] = new(sql.NullInt64)
		case instructor.FieldName, instructor.FieldKana, instructor.FieldBiography, instructor.FieldPhoneNumber, instructor.FieldEmail:
			values[i] = new(sql.NullString)
		case instructor.FieldCreateTime, instructor.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Instructor", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Instructor fields.
func (i *Instructor) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for j := range columns {
		switch columns[j] {
		case instructor.FieldID:
			value, ok := values[j].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			i.ID = int(value.Int64)
		case instructor.FieldCreateTime:
			if value, ok := values[j].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[j])
			} else if value.Valid {
				i.CreateTime = value.Time
			}
		case instructor.FieldUpdateTime:
			if value, ok := values[j].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[j])
			} else if value.Valid {
				i.UpdateTime = value.Time
			}
		case instructor.FieldName:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[j])
			} else if value.Valid {
				i.Name = value.String
			}
		case instructor.FieldKana:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field kana", values[j])
			} else if value.Valid {
				i.Kana = value.String
			}
		case instructor.FieldBiography:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field biography", values[j])
			} else if value.Valid {
				i.Biography = value.String
			}
		case instructor.FieldPhoneNumber:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field phone_number", values[j])
			} else if value.Valid {
				i.PhoneNumber = value.String
			}
		case instructor.FieldEmail:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[j])
			} else if value.Valid {
				i.Email = value.String
			}
		}
	}
	return nil
}

// QueryClasses queries the "classes" edge of the Instructor entity.
func (i *Instructor) QueryClasses() *ClassQuery {
	return (&InstructorClient{config: i.config}).QueryClasses(i)
}

// Update returns a builder for updating this Instructor.
// Note that you need to call Instructor.Unwrap() before calling this method if this Instructor
// was returned from a transaction, and the transaction was committed or rolled back.
func (i *Instructor) Update() *InstructorUpdateOne {
	return (&InstructorClient{config: i.config}).UpdateOne(i)
}

// Unwrap unwraps the Instructor entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (i *Instructor) Unwrap() *Instructor {
	tx, ok := i.config.driver.(*txDriver)
	if !ok {
		panic("ent: Instructor is not a transactional entity")
	}
	i.config.driver = tx.drv
	return i
}

// String implements the fmt.Stringer.
func (i *Instructor) String() string {
	var builder strings.Builder
	builder.WriteString("Instructor(")
	builder.WriteString(fmt.Sprintf("id=%v", i.ID))
	builder.WriteString(", create_time=")
	builder.WriteString(i.CreateTime.Format(time.ANSIC))
	builder.WriteString(", update_time=")
	builder.WriteString(i.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", name=")
	builder.WriteString(i.Name)
	builder.WriteString(", kana=")
	builder.WriteString(i.Kana)
	builder.WriteString(", biography=")
	builder.WriteString(i.Biography)
	builder.WriteString(", phone_number=")
	builder.WriteString(i.PhoneNumber)
	builder.WriteString(", email=")
	builder.WriteString(i.Email)
	builder.WriteByte(')')
	return builder.String()
}

// Instructors is a parsable slice of Instructor.
type Instructors []*Instructor

func (i Instructors) config(cfg config) {
	for _i := range i {
		i[_i].config = cfg
	}
}
