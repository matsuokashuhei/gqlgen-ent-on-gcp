// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/matsuokashuhei/landin/ent/class"
	"github.com/matsuokashuhei/landin/ent/member"
	"github.com/matsuokashuhei/landin/ent/membersclass"
	"github.com/matsuokashuhei/landin/ent/predicate"
)

// MembersClassUpdate is the builder for updating MembersClass entities.
type MembersClassUpdate struct {
	config
	hooks    []Hook
	mutation *MembersClassMutation
}

// Where appends a list predicates to the MembersClassUpdate builder.
func (mcu *MembersClassUpdate) Where(ps ...predicate.MembersClass) *MembersClassUpdate {
	mcu.mutation.Where(ps...)
	return mcu
}

// SetUpdateTime sets the "update_time" field.
func (mcu *MembersClassUpdate) SetUpdateTime(t time.Time) *MembersClassUpdate {
	mcu.mutation.SetUpdateTime(t)
	return mcu
}

// SetDateOfAdmission sets the "date_of_admission" field.
func (mcu *MembersClassUpdate) SetDateOfAdmission(t time.Time) *MembersClassUpdate {
	mcu.mutation.SetDateOfAdmission(t)
	return mcu
}

// SetDateOfWithdrawal sets the "date_of_withdrawal" field.
func (mcu *MembersClassUpdate) SetDateOfWithdrawal(t time.Time) *MembersClassUpdate {
	mcu.mutation.SetDateOfWithdrawal(t)
	return mcu
}

// SetNillableDateOfWithdrawal sets the "date_of_withdrawal" field if the given value is not nil.
func (mcu *MembersClassUpdate) SetNillableDateOfWithdrawal(t *time.Time) *MembersClassUpdate {
	if t != nil {
		mcu.SetDateOfWithdrawal(*t)
	}
	return mcu
}

// ClearDateOfWithdrawal clears the value of the "date_of_withdrawal" field.
func (mcu *MembersClassUpdate) ClearDateOfWithdrawal() *MembersClassUpdate {
	mcu.mutation.ClearDateOfWithdrawal()
	return mcu
}

// SetMemberID sets the "member" edge to the Member entity by ID.
func (mcu *MembersClassUpdate) SetMemberID(id int) *MembersClassUpdate {
	mcu.mutation.SetMemberID(id)
	return mcu
}

// SetMember sets the "member" edge to the Member entity.
func (mcu *MembersClassUpdate) SetMember(m *Member) *MembersClassUpdate {
	return mcu.SetMemberID(m.ID)
}

// SetClassID sets the "class" edge to the Class entity by ID.
func (mcu *MembersClassUpdate) SetClassID(id int) *MembersClassUpdate {
	mcu.mutation.SetClassID(id)
	return mcu
}

// SetClass sets the "class" edge to the Class entity.
func (mcu *MembersClassUpdate) SetClass(c *Class) *MembersClassUpdate {
	return mcu.SetClassID(c.ID)
}

// Mutation returns the MembersClassMutation object of the builder.
func (mcu *MembersClassUpdate) Mutation() *MembersClassMutation {
	return mcu.mutation
}

// ClearMember clears the "member" edge to the Member entity.
func (mcu *MembersClassUpdate) ClearMember() *MembersClassUpdate {
	mcu.mutation.ClearMember()
	return mcu
}

// ClearClass clears the "class" edge to the Class entity.
func (mcu *MembersClassUpdate) ClearClass() *MembersClassUpdate {
	mcu.mutation.ClearClass()
	return mcu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mcu *MembersClassUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	mcu.defaults()
	if len(mcu.hooks) == 0 {
		if err = mcu.check(); err != nil {
			return 0, err
		}
		affected, err = mcu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MembersClassMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = mcu.check(); err != nil {
				return 0, err
			}
			mcu.mutation = mutation
			affected, err = mcu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(mcu.hooks) - 1; i >= 0; i-- {
			if mcu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = mcu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mcu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (mcu *MembersClassUpdate) SaveX(ctx context.Context) int {
	affected, err := mcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mcu *MembersClassUpdate) Exec(ctx context.Context) error {
	_, err := mcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mcu *MembersClassUpdate) ExecX(ctx context.Context) {
	if err := mcu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mcu *MembersClassUpdate) defaults() {
	if _, ok := mcu.mutation.UpdateTime(); !ok {
		v := membersclass.UpdateDefaultUpdateTime()
		mcu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mcu *MembersClassUpdate) check() error {
	if _, ok := mcu.mutation.MemberID(); mcu.mutation.MemberCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "MembersClass.member"`)
	}
	if _, ok := mcu.mutation.ClassID(); mcu.mutation.ClassCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "MembersClass.class"`)
	}
	return nil
}

func (mcu *MembersClassUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   membersclass.Table,
			Columns: membersclass.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: membersclass.FieldID,
			},
		},
	}
	if ps := mcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mcu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: membersclass.FieldUpdateTime,
		})
	}
	if value, ok := mcu.mutation.DateOfAdmission(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: membersclass.FieldDateOfAdmission,
		})
	}
	if value, ok := mcu.mutation.DateOfWithdrawal(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: membersclass.FieldDateOfWithdrawal,
		})
	}
	if mcu.mutation.DateOfWithdrawalCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: membersclass.FieldDateOfWithdrawal,
		})
	}
	if mcu.mutation.MemberCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   membersclass.MemberTable,
			Columns: []string{membersclass.MemberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: member.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mcu.mutation.MemberIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   membersclass.MemberTable,
			Columns: []string{membersclass.MemberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: member.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mcu.mutation.ClassCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   membersclass.ClassTable,
			Columns: []string{membersclass.ClassColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: class.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mcu.mutation.ClassIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   membersclass.ClassTable,
			Columns: []string{membersclass.ClassColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: class.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{membersclass.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// MembersClassUpdateOne is the builder for updating a single MembersClass entity.
type MembersClassUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MembersClassMutation
}

// SetUpdateTime sets the "update_time" field.
func (mcuo *MembersClassUpdateOne) SetUpdateTime(t time.Time) *MembersClassUpdateOne {
	mcuo.mutation.SetUpdateTime(t)
	return mcuo
}

// SetDateOfAdmission sets the "date_of_admission" field.
func (mcuo *MembersClassUpdateOne) SetDateOfAdmission(t time.Time) *MembersClassUpdateOne {
	mcuo.mutation.SetDateOfAdmission(t)
	return mcuo
}

// SetDateOfWithdrawal sets the "date_of_withdrawal" field.
func (mcuo *MembersClassUpdateOne) SetDateOfWithdrawal(t time.Time) *MembersClassUpdateOne {
	mcuo.mutation.SetDateOfWithdrawal(t)
	return mcuo
}

// SetNillableDateOfWithdrawal sets the "date_of_withdrawal" field if the given value is not nil.
func (mcuo *MembersClassUpdateOne) SetNillableDateOfWithdrawal(t *time.Time) *MembersClassUpdateOne {
	if t != nil {
		mcuo.SetDateOfWithdrawal(*t)
	}
	return mcuo
}

// ClearDateOfWithdrawal clears the value of the "date_of_withdrawal" field.
func (mcuo *MembersClassUpdateOne) ClearDateOfWithdrawal() *MembersClassUpdateOne {
	mcuo.mutation.ClearDateOfWithdrawal()
	return mcuo
}

// SetMemberID sets the "member" edge to the Member entity by ID.
func (mcuo *MembersClassUpdateOne) SetMemberID(id int) *MembersClassUpdateOne {
	mcuo.mutation.SetMemberID(id)
	return mcuo
}

// SetMember sets the "member" edge to the Member entity.
func (mcuo *MembersClassUpdateOne) SetMember(m *Member) *MembersClassUpdateOne {
	return mcuo.SetMemberID(m.ID)
}

// SetClassID sets the "class" edge to the Class entity by ID.
func (mcuo *MembersClassUpdateOne) SetClassID(id int) *MembersClassUpdateOne {
	mcuo.mutation.SetClassID(id)
	return mcuo
}

// SetClass sets the "class" edge to the Class entity.
func (mcuo *MembersClassUpdateOne) SetClass(c *Class) *MembersClassUpdateOne {
	return mcuo.SetClassID(c.ID)
}

// Mutation returns the MembersClassMutation object of the builder.
func (mcuo *MembersClassUpdateOne) Mutation() *MembersClassMutation {
	return mcuo.mutation
}

// ClearMember clears the "member" edge to the Member entity.
func (mcuo *MembersClassUpdateOne) ClearMember() *MembersClassUpdateOne {
	mcuo.mutation.ClearMember()
	return mcuo
}

// ClearClass clears the "class" edge to the Class entity.
func (mcuo *MembersClassUpdateOne) ClearClass() *MembersClassUpdateOne {
	mcuo.mutation.ClearClass()
	return mcuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (mcuo *MembersClassUpdateOne) Select(field string, fields ...string) *MembersClassUpdateOne {
	mcuo.fields = append([]string{field}, fields...)
	return mcuo
}

// Save executes the query and returns the updated MembersClass entity.
func (mcuo *MembersClassUpdateOne) Save(ctx context.Context) (*MembersClass, error) {
	var (
		err  error
		node *MembersClass
	)
	mcuo.defaults()
	if len(mcuo.hooks) == 0 {
		if err = mcuo.check(); err != nil {
			return nil, err
		}
		node, err = mcuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MembersClassMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = mcuo.check(); err != nil {
				return nil, err
			}
			mcuo.mutation = mutation
			node, err = mcuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(mcuo.hooks) - 1; i >= 0; i-- {
			if mcuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = mcuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mcuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (mcuo *MembersClassUpdateOne) SaveX(ctx context.Context) *MembersClass {
	node, err := mcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (mcuo *MembersClassUpdateOne) Exec(ctx context.Context) error {
	_, err := mcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mcuo *MembersClassUpdateOne) ExecX(ctx context.Context) {
	if err := mcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mcuo *MembersClassUpdateOne) defaults() {
	if _, ok := mcuo.mutation.UpdateTime(); !ok {
		v := membersclass.UpdateDefaultUpdateTime()
		mcuo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mcuo *MembersClassUpdateOne) check() error {
	if _, ok := mcuo.mutation.MemberID(); mcuo.mutation.MemberCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "MembersClass.member"`)
	}
	if _, ok := mcuo.mutation.ClassID(); mcuo.mutation.ClassCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "MembersClass.class"`)
	}
	return nil
}

func (mcuo *MembersClassUpdateOne) sqlSave(ctx context.Context) (_node *MembersClass, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   membersclass.Table,
			Columns: membersclass.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: membersclass.FieldID,
			},
		},
	}
	id, ok := mcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "MembersClass.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := mcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, membersclass.FieldID)
		for _, f := range fields {
			if !membersclass.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != membersclass.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := mcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mcuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: membersclass.FieldUpdateTime,
		})
	}
	if value, ok := mcuo.mutation.DateOfAdmission(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: membersclass.FieldDateOfAdmission,
		})
	}
	if value, ok := mcuo.mutation.DateOfWithdrawal(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: membersclass.FieldDateOfWithdrawal,
		})
	}
	if mcuo.mutation.DateOfWithdrawalCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: membersclass.FieldDateOfWithdrawal,
		})
	}
	if mcuo.mutation.MemberCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   membersclass.MemberTable,
			Columns: []string{membersclass.MemberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: member.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mcuo.mutation.MemberIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   membersclass.MemberTable,
			Columns: []string{membersclass.MemberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: member.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mcuo.mutation.ClassCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   membersclass.ClassTable,
			Columns: []string{membersclass.ClassColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: class.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mcuo.mutation.ClassIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   membersclass.ClassTable,
			Columns: []string{membersclass.ClassColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: class.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &MembersClass{config: mcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, mcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{membersclass.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
