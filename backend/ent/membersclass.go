// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/matsuokashuhei/landin/ent/class"
	"github.com/matsuokashuhei/landin/ent/member"
	"github.com/matsuokashuhei/landin/ent/membersclass"
)

// MembersClass is the model entity for the MembersClass schema.
type MembersClass struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// DateOfAdmission holds the value of the "date_of_admission" field.
	DateOfAdmission time.Time `json:"date_of_admission,omitempty"`
	// DateOfWithdrawal holds the value of the "date_of_withdrawal" field.
	DateOfWithdrawal time.Time `json:"date_of_withdrawal,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MembersClassQuery when eager-loading is set.
	Edges                  MembersClassEdges `json:"edges"`
	class_members_classes  *int
	member_members_classes *int
}

// MembersClassEdges holds the relations/edges for other nodes in the graph.
type MembersClassEdges struct {
	// Member holds the value of the member edge.
	Member *Member `json:"member,omitempty"`
	// Class holds the value of the class edge.
	Class *Class `json:"class,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// MemberOrErr returns the Member value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MembersClassEdges) MemberOrErr() (*Member, error) {
	if e.loadedTypes[0] {
		if e.Member == nil {
			// The edge member was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: member.Label}
		}
		return e.Member, nil
	}
	return nil, &NotLoadedError{edge: "member"}
}

// ClassOrErr returns the Class value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MembersClassEdges) ClassOrErr() (*Class, error) {
	if e.loadedTypes[1] {
		if e.Class == nil {
			// The edge class was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: class.Label}
		}
		return e.Class, nil
	}
	return nil, &NotLoadedError{edge: "class"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*MembersClass) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case membersclass.FieldID:
			values[i] = new(sql.NullInt64)
		case membersclass.FieldCreateTime, membersclass.FieldUpdateTime, membersclass.FieldDateOfAdmission, membersclass.FieldDateOfWithdrawal:
			values[i] = new(sql.NullTime)
		case membersclass.ForeignKeys[0]: // class_members_classes
			values[i] = new(sql.NullInt64)
		case membersclass.ForeignKeys[1]: // member_members_classes
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type MembersClass", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the MembersClass fields.
func (mc *MembersClass) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case membersclass.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			mc.ID = int(value.Int64)
		case membersclass.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				mc.CreateTime = value.Time
			}
		case membersclass.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				mc.UpdateTime = value.Time
			}
		case membersclass.FieldDateOfAdmission:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field date_of_admission", values[i])
			} else if value.Valid {
				mc.DateOfAdmission = value.Time
			}
		case membersclass.FieldDateOfWithdrawal:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field date_of_withdrawal", values[i])
			} else if value.Valid {
				mc.DateOfWithdrawal = value.Time
			}
		case membersclass.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field class_members_classes", value)
			} else if value.Valid {
				mc.class_members_classes = new(int)
				*mc.class_members_classes = int(value.Int64)
			}
		case membersclass.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field member_members_classes", value)
			} else if value.Valid {
				mc.member_members_classes = new(int)
				*mc.member_members_classes = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryMember queries the "member" edge of the MembersClass entity.
func (mc *MembersClass) QueryMember() *MemberQuery {
	return (&MembersClassClient{config: mc.config}).QueryMember(mc)
}

// QueryClass queries the "class" edge of the MembersClass entity.
func (mc *MembersClass) QueryClass() *ClassQuery {
	return (&MembersClassClient{config: mc.config}).QueryClass(mc)
}

// Update returns a builder for updating this MembersClass.
// Note that you need to call MembersClass.Unwrap() before calling this method if this MembersClass
// was returned from a transaction, and the transaction was committed or rolled back.
func (mc *MembersClass) Update() *MembersClassUpdateOne {
	return (&MembersClassClient{config: mc.config}).UpdateOne(mc)
}

// Unwrap unwraps the MembersClass entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (mc *MembersClass) Unwrap() *MembersClass {
	tx, ok := mc.config.driver.(*txDriver)
	if !ok {
		panic("ent: MembersClass is not a transactional entity")
	}
	mc.config.driver = tx.drv
	return mc
}

// String implements the fmt.Stringer.
func (mc *MembersClass) String() string {
	var builder strings.Builder
	builder.WriteString("MembersClass(")
	builder.WriteString(fmt.Sprintf("id=%v", mc.ID))
	builder.WriteString(", create_time=")
	builder.WriteString(mc.CreateTime.Format(time.ANSIC))
	builder.WriteString(", update_time=")
	builder.WriteString(mc.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", date_of_admission=")
	builder.WriteString(mc.DateOfAdmission.Format(time.ANSIC))
	builder.WriteString(", date_of_withdrawal=")
	builder.WriteString(mc.DateOfWithdrawal.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// MembersClasses is a parsable slice of MembersClass.
type MembersClasses []*MembersClass

func (mc MembersClasses) config(cfg config) {
	for _i := range mc {
		mc[_i].config = cfg
	}
}
