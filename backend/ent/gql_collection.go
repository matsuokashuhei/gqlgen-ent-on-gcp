// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
)

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (c *ClassQuery) CollectFields(ctx context.Context, satisfies ...string) *ClassQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		c = c.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return c
}

func (c *ClassQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *ClassQuery {
	return c
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (i *InstructorQuery) CollectFields(ctx context.Context, satisfies ...string) *InstructorQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		i = i.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return i
}

func (i *InstructorQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *InstructorQuery {
	return i
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (m *MemberQuery) CollectFields(ctx context.Context, satisfies ...string) *MemberQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		m = m.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return m
}

func (m *MemberQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *MemberQuery {
	return m
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (mc *MembersClassQuery) CollectFields(ctx context.Context, satisfies ...string) *MembersClassQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		mc = mc.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return mc
}

func (mc *MembersClassQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *MembersClassQuery {
	return mc
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (r *RoomQuery) CollectFields(ctx context.Context, satisfies ...string) *RoomQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		r = r.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return r
}

func (r *RoomQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *RoomQuery {
	return r
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (s *ScheduleQuery) CollectFields(ctx context.Context, satisfies ...string) *ScheduleQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		s = s.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return s
}

func (s *ScheduleQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *ScheduleQuery {
	return s
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (s *SchoolQuery) CollectFields(ctx context.Context, satisfies ...string) *SchoolQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		s = s.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return s
}

func (s *SchoolQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *SchoolQuery {
	return s
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (s *StudioQuery) CollectFields(ctx context.Context, satisfies ...string) *StudioQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		s = s.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return s
}

func (s *StudioQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *StudioQuery {
	return s
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (u *UserQuery) CollectFields(ctx context.Context, satisfies ...string) *UserQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		u = u.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return u
}

func (u *UserQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *UserQuery {
	return u
}
