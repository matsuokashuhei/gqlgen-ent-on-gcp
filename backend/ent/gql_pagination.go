// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"encoding/base64"
	"errors"
	"fmt"
	"io"
	"strconv"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/errcode"
	"github.com/matsuokashuhei/landin/ent/class"
	"github.com/matsuokashuhei/landin/ent/instructor"
	"github.com/matsuokashuhei/landin/ent/room"
	"github.com/matsuokashuhei/landin/ent/schedule"
	"github.com/matsuokashuhei/landin/ent/school"
	"github.com/matsuokashuhei/landin/ent/studio"
	"github.com/matsuokashuhei/landin/ent/user"
	"github.com/vektah/gqlparser/v2/gqlerror"
	"github.com/vmihailenco/msgpack/v5"
)

// OrderDirection defines the directions in which to order a list of items.
type OrderDirection string

const (
	// OrderDirectionAsc specifies an ascending order.
	OrderDirectionAsc OrderDirection = "ASC"
	// OrderDirectionDesc specifies a descending order.
	OrderDirectionDesc OrderDirection = "DESC"
)

// Validate the order direction value.
func (o OrderDirection) Validate() error {
	if o != OrderDirectionAsc && o != OrderDirectionDesc {
		return fmt.Errorf("%s is not a valid OrderDirection", o)
	}
	return nil
}

// String implements fmt.Stringer interface.
func (o OrderDirection) String() string {
	return string(o)
}

// MarshalGQL implements graphql.Marshaler interface.
func (o OrderDirection) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(o.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (o *OrderDirection) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("order direction %T must be a string", val)
	}
	*o = OrderDirection(str)
	return o.Validate()
}

func (o OrderDirection) reverse() OrderDirection {
	if o == OrderDirectionDesc {
		return OrderDirectionAsc
	}
	return OrderDirectionDesc
}

func (o OrderDirection) orderFunc(field string) OrderFunc {
	if o == OrderDirectionDesc {
		return Desc(field)
	}
	return Asc(field)
}

func cursorsToPredicates(direction OrderDirection, after, before *Cursor, field, idField string) []func(s *sql.Selector) {
	var predicates []func(s *sql.Selector)
	if after != nil {
		if after.Value != nil {
			var predicate func([]string, ...interface{}) *sql.Predicate
			if direction == OrderDirectionAsc {
				predicate = sql.CompositeGT
			} else {
				predicate = sql.CompositeLT
			}
			predicates = append(predicates, func(s *sql.Selector) {
				s.Where(predicate(
					s.Columns(field, idField),
					after.Value, after.ID,
				))
			})
		} else {
			var predicate func(string, interface{}) *sql.Predicate
			if direction == OrderDirectionAsc {
				predicate = sql.GT
			} else {
				predicate = sql.LT
			}
			predicates = append(predicates, func(s *sql.Selector) {
				s.Where(predicate(
					s.C(idField),
					after.ID,
				))
			})
		}
	}
	if before != nil {
		if before.Value != nil {
			var predicate func([]string, ...interface{}) *sql.Predicate
			if direction == OrderDirectionAsc {
				predicate = sql.CompositeLT
			} else {
				predicate = sql.CompositeGT
			}
			predicates = append(predicates, func(s *sql.Selector) {
				s.Where(predicate(
					s.Columns(field, idField),
					before.Value, before.ID,
				))
			})
		} else {
			var predicate func(string, interface{}) *sql.Predicate
			if direction == OrderDirectionAsc {
				predicate = sql.LT
			} else {
				predicate = sql.GT
			}
			predicates = append(predicates, func(s *sql.Selector) {
				s.Where(predicate(
					s.C(idField),
					before.ID,
				))
			})
		}
	}
	return predicates
}

// PageInfo of a connection type.
type PageInfo struct {
	HasNextPage     bool    `json:"hasNextPage"`
	HasPreviousPage bool    `json:"hasPreviousPage"`
	StartCursor     *Cursor `json:"startCursor"`
	EndCursor       *Cursor `json:"endCursor"`
}

// Cursor of an edge type.
type Cursor struct {
	ID    int   `msgpack:"i"`
	Value Value `msgpack:"v,omitempty"`
}

// MarshalGQL implements graphql.Marshaler interface.
func (c Cursor) MarshalGQL(w io.Writer) {
	quote := []byte{'"'}
	w.Write(quote)
	defer w.Write(quote)
	wc := base64.NewEncoder(base64.RawStdEncoding, w)
	defer wc.Close()
	_ = msgpack.NewEncoder(wc).Encode(c)
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (c *Cursor) UnmarshalGQL(v interface{}) error {
	s, ok := v.(string)
	if !ok {
		return fmt.Errorf("%T is not a string", v)
	}
	if err := msgpack.NewDecoder(
		base64.NewDecoder(
			base64.RawStdEncoding,
			strings.NewReader(s),
		),
	).Decode(c); err != nil {
		return fmt.Errorf("cannot decode cursor: %w", err)
	}
	return nil
}

const errInvalidPagination = "INVALID_PAGINATION"

func validateFirstLast(first, last *int) (err *gqlerror.Error) {
	switch {
	case first != nil && last != nil:
		err = &gqlerror.Error{
			Message: "Passing both `first` and `last` to paginate a connection is not supported.",
		}
	case first != nil && *first < 0:
		err = &gqlerror.Error{
			Message: "`first` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	case last != nil && *last < 0:
		err = &gqlerror.Error{
			Message: "`last` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	}
	return err
}

func getCollectedField(ctx context.Context, path ...string) *graphql.CollectedField {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return nil
	}
	oc := graphql.GetOperationContext(ctx)
	field := fc.Field

walk:
	for _, name := range path {
		for _, f := range graphql.CollectFields(oc, field.Selections, nil) {
			if f.Name == name {
				field = f
				continue walk
			}
		}
		return nil
	}
	return &field
}

func hasCollectedField(ctx context.Context, path ...string) bool {
	if graphql.GetFieldContext(ctx) == nil {
		return true
	}
	return getCollectedField(ctx, path...) != nil
}

const (
	edgesField      = "edges"
	nodeField       = "node"
	pageInfoField   = "pageInfo"
	totalCountField = "totalCount"
)

// ClassEdge is the edge representation of Class.
type ClassEdge struct {
	Node   *Class `json:"node"`
	Cursor Cursor `json:"cursor"`
}

// ClassConnection is the connection containing edges to Class.
type ClassConnection struct {
	Edges      []*ClassEdge `json:"edges"`
	PageInfo   PageInfo     `json:"pageInfo"`
	TotalCount int          `json:"totalCount"`
}

// ClassPaginateOption enables pagination customization.
type ClassPaginateOption func(*classPager) error

// WithClassOrder configures pagination ordering.
func WithClassOrder(order *ClassOrder) ClassPaginateOption {
	if order == nil {
		order = DefaultClassOrder
	}
	o := *order
	return func(pager *classPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultClassOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithClassFilter configures pagination filter.
func WithClassFilter(filter func(*ClassQuery) (*ClassQuery, error)) ClassPaginateOption {
	return func(pager *classPager) error {
		if filter == nil {
			return errors.New("ClassQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type classPager struct {
	order  *ClassOrder
	filter func(*ClassQuery) (*ClassQuery, error)
}

func newClassPager(opts []ClassPaginateOption) (*classPager, error) {
	pager := &classPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultClassOrder
	}
	return pager, nil
}

func (p *classPager) applyFilter(query *ClassQuery) (*ClassQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *classPager) toCursor(c *Class) Cursor {
	return p.order.Field.toCursor(c)
}

func (p *classPager) applyCursors(query *ClassQuery, after, before *Cursor) *ClassQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultClassOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *classPager) applyOrder(query *ClassQuery, reverse bool) *ClassQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultClassOrder.Field {
		query = query.Order(direction.orderFunc(DefaultClassOrder.Field.field))
	}
	return query
}

// Paginate executes the query and returns a relay based cursor connection to Class.
func (c *ClassQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...ClassPaginateOption,
) (*ClassConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newClassPager(opts)
	if err != nil {
		return nil, err
	}

	if c, err = pager.applyFilter(c); err != nil {
		return nil, err
	}

	conn := &ClassConnection{Edges: []*ClassEdge{}}
	if !hasCollectedField(ctx, edgesField) || first != nil && *first == 0 || last != nil && *last == 0 {
		if hasCollectedField(ctx, totalCountField) ||
			hasCollectedField(ctx, pageInfoField) {
			count, err := c.Count(ctx)
			if err != nil {
				return nil, err
			}
			conn.TotalCount = count
			conn.PageInfo.HasNextPage = first != nil && count > 0
			conn.PageInfo.HasPreviousPage = last != nil && count > 0
		}
		return conn, nil
	}

	if (after != nil || first != nil || before != nil || last != nil) && hasCollectedField(ctx, totalCountField) {
		count, err := c.Clone().Count(ctx)
		if err != nil {
			return nil, err
		}
		conn.TotalCount = count
	}

	c = pager.applyCursors(c, after, before)
	c = pager.applyOrder(c, last != nil)
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	if limit > 0 {
		c = c.Limit(limit)
	}

	if field := getCollectedField(ctx, edgesField, nodeField); field != nil {
		c = c.collectField(graphql.GetOperationContext(ctx), *field)
	}

	nodes, err := c.All(ctx)
	if err != nil || len(nodes) == 0 {
		return conn, err
	}

	if len(nodes) == limit {
		conn.PageInfo.HasNextPage = first != nil
		conn.PageInfo.HasPreviousPage = last != nil
		nodes = nodes[:len(nodes)-1]
	}

	var nodeAt func(int) *Class
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Class {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Class {
			return nodes[i]
		}
	}

	conn.Edges = make([]*ClassEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		conn.Edges[i] = &ClassEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}

	conn.PageInfo.StartCursor = &conn.Edges[0].Cursor
	conn.PageInfo.EndCursor = &conn.Edges[len(conn.Edges)-1].Cursor
	if conn.TotalCount == 0 {
		conn.TotalCount = len(nodes)
	}

	return conn, nil
}

// ClassOrderField defines the ordering field of Class.
type ClassOrderField struct {
	field    string
	toCursor func(*Class) Cursor
}

// ClassOrder defines the ordering of Class.
type ClassOrder struct {
	Direction OrderDirection   `json:"direction"`
	Field     *ClassOrderField `json:"field"`
}

// DefaultClassOrder is the default ordering of Class.
var DefaultClassOrder = &ClassOrder{
	Direction: OrderDirectionAsc,
	Field: &ClassOrderField{
		field: class.FieldID,
		toCursor: func(c *Class) Cursor {
			return Cursor{ID: c.ID}
		},
	},
}

// ToEdge converts Class into ClassEdge.
func (c *Class) ToEdge(order *ClassOrder) *ClassEdge {
	if order == nil {
		order = DefaultClassOrder
	}
	return &ClassEdge{
		Node:   c,
		Cursor: order.Field.toCursor(c),
	}
}

// InstructorEdge is the edge representation of Instructor.
type InstructorEdge struct {
	Node   *Instructor `json:"node"`
	Cursor Cursor      `json:"cursor"`
}

// InstructorConnection is the connection containing edges to Instructor.
type InstructorConnection struct {
	Edges      []*InstructorEdge `json:"edges"`
	PageInfo   PageInfo          `json:"pageInfo"`
	TotalCount int               `json:"totalCount"`
}

// InstructorPaginateOption enables pagination customization.
type InstructorPaginateOption func(*instructorPager) error

// WithInstructorOrder configures pagination ordering.
func WithInstructorOrder(order *InstructorOrder) InstructorPaginateOption {
	if order == nil {
		order = DefaultInstructorOrder
	}
	o := *order
	return func(pager *instructorPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultInstructorOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithInstructorFilter configures pagination filter.
func WithInstructorFilter(filter func(*InstructorQuery) (*InstructorQuery, error)) InstructorPaginateOption {
	return func(pager *instructorPager) error {
		if filter == nil {
			return errors.New("InstructorQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type instructorPager struct {
	order  *InstructorOrder
	filter func(*InstructorQuery) (*InstructorQuery, error)
}

func newInstructorPager(opts []InstructorPaginateOption) (*instructorPager, error) {
	pager := &instructorPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultInstructorOrder
	}
	return pager, nil
}

func (p *instructorPager) applyFilter(query *InstructorQuery) (*InstructorQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *instructorPager) toCursor(i *Instructor) Cursor {
	return p.order.Field.toCursor(i)
}

func (p *instructorPager) applyCursors(query *InstructorQuery, after, before *Cursor) *InstructorQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultInstructorOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *instructorPager) applyOrder(query *InstructorQuery, reverse bool) *InstructorQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultInstructorOrder.Field {
		query = query.Order(direction.orderFunc(DefaultInstructorOrder.Field.field))
	}
	return query
}

// Paginate executes the query and returns a relay based cursor connection to Instructor.
func (i *InstructorQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...InstructorPaginateOption,
) (*InstructorConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newInstructorPager(opts)
	if err != nil {
		return nil, err
	}

	if i, err = pager.applyFilter(i); err != nil {
		return nil, err
	}

	conn := &InstructorConnection{Edges: []*InstructorEdge{}}
	if !hasCollectedField(ctx, edgesField) || first != nil && *first == 0 || last != nil && *last == 0 {
		if hasCollectedField(ctx, totalCountField) ||
			hasCollectedField(ctx, pageInfoField) {
			count, err := i.Count(ctx)
			if err != nil {
				return nil, err
			}
			conn.TotalCount = count
			conn.PageInfo.HasNextPage = first != nil && count > 0
			conn.PageInfo.HasPreviousPage = last != nil && count > 0
		}
		return conn, nil
	}

	if (after != nil || first != nil || before != nil || last != nil) && hasCollectedField(ctx, totalCountField) {
		count, err := i.Clone().Count(ctx)
		if err != nil {
			return nil, err
		}
		conn.TotalCount = count
	}

	i = pager.applyCursors(i, after, before)
	i = pager.applyOrder(i, last != nil)
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	if limit > 0 {
		i = i.Limit(limit)
	}

	if field := getCollectedField(ctx, edgesField, nodeField); field != nil {
		i = i.collectField(graphql.GetOperationContext(ctx), *field)
	}

	nodes, err := i.All(ctx)
	if err != nil || len(nodes) == 0 {
		return conn, err
	}

	if len(nodes) == limit {
		conn.PageInfo.HasNextPage = first != nil
		conn.PageInfo.HasPreviousPage = last != nil
		nodes = nodes[:len(nodes)-1]
	}

	var nodeAt func(int) *Instructor
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Instructor {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Instructor {
			return nodes[i]
		}
	}

	conn.Edges = make([]*InstructorEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		conn.Edges[i] = &InstructorEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}

	conn.PageInfo.StartCursor = &conn.Edges[0].Cursor
	conn.PageInfo.EndCursor = &conn.Edges[len(conn.Edges)-1].Cursor
	if conn.TotalCount == 0 {
		conn.TotalCount = len(nodes)
	}

	return conn, nil
}

var (
	// InstructorOrderFieldSyllabicCharacters orders Instructor by syllabic_characters.
	InstructorOrderFieldSyllabicCharacters = &InstructorOrderField{
		field: instructor.FieldSyllabicCharacters,
		toCursor: func(i *Instructor) Cursor {
			return Cursor{
				ID:    i.ID,
				Value: i.SyllabicCharacters,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f InstructorOrderField) String() string {
	var str string
	switch f.field {
	case instructor.FieldSyllabicCharacters:
		str = "SYLLABIC_CHARACTERS"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f InstructorOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *InstructorOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("InstructorOrderField %T must be a string", v)
	}
	switch str {
	case "SYLLABIC_CHARACTERS":
		*f = *InstructorOrderFieldSyllabicCharacters
	default:
		return fmt.Errorf("%s is not a valid InstructorOrderField", str)
	}
	return nil
}

// InstructorOrderField defines the ordering field of Instructor.
type InstructorOrderField struct {
	field    string
	toCursor func(*Instructor) Cursor
}

// InstructorOrder defines the ordering of Instructor.
type InstructorOrder struct {
	Direction OrderDirection        `json:"direction"`
	Field     *InstructorOrderField `json:"field"`
}

// DefaultInstructorOrder is the default ordering of Instructor.
var DefaultInstructorOrder = &InstructorOrder{
	Direction: OrderDirectionAsc,
	Field: &InstructorOrderField{
		field: instructor.FieldID,
		toCursor: func(i *Instructor) Cursor {
			return Cursor{ID: i.ID}
		},
	},
}

// ToEdge converts Instructor into InstructorEdge.
func (i *Instructor) ToEdge(order *InstructorOrder) *InstructorEdge {
	if order == nil {
		order = DefaultInstructorOrder
	}
	return &InstructorEdge{
		Node:   i,
		Cursor: order.Field.toCursor(i),
	}
}

// RoomEdge is the edge representation of Room.
type RoomEdge struct {
	Node   *Room  `json:"node"`
	Cursor Cursor `json:"cursor"`
}

// RoomConnection is the connection containing edges to Room.
type RoomConnection struct {
	Edges      []*RoomEdge `json:"edges"`
	PageInfo   PageInfo    `json:"pageInfo"`
	TotalCount int         `json:"totalCount"`
}

// RoomPaginateOption enables pagination customization.
type RoomPaginateOption func(*roomPager) error

// WithRoomOrder configures pagination ordering.
func WithRoomOrder(order *RoomOrder) RoomPaginateOption {
	if order == nil {
		order = DefaultRoomOrder
	}
	o := *order
	return func(pager *roomPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultRoomOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithRoomFilter configures pagination filter.
func WithRoomFilter(filter func(*RoomQuery) (*RoomQuery, error)) RoomPaginateOption {
	return func(pager *roomPager) error {
		if filter == nil {
			return errors.New("RoomQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type roomPager struct {
	order  *RoomOrder
	filter func(*RoomQuery) (*RoomQuery, error)
}

func newRoomPager(opts []RoomPaginateOption) (*roomPager, error) {
	pager := &roomPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultRoomOrder
	}
	return pager, nil
}

func (p *roomPager) applyFilter(query *RoomQuery) (*RoomQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *roomPager) toCursor(r *Room) Cursor {
	return p.order.Field.toCursor(r)
}

func (p *roomPager) applyCursors(query *RoomQuery, after, before *Cursor) *RoomQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultRoomOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *roomPager) applyOrder(query *RoomQuery, reverse bool) *RoomQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultRoomOrder.Field {
		query = query.Order(direction.orderFunc(DefaultRoomOrder.Field.field))
	}
	return query
}

// Paginate executes the query and returns a relay based cursor connection to Room.
func (r *RoomQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...RoomPaginateOption,
) (*RoomConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newRoomPager(opts)
	if err != nil {
		return nil, err
	}

	if r, err = pager.applyFilter(r); err != nil {
		return nil, err
	}

	conn := &RoomConnection{Edges: []*RoomEdge{}}
	if !hasCollectedField(ctx, edgesField) || first != nil && *first == 0 || last != nil && *last == 0 {
		if hasCollectedField(ctx, totalCountField) ||
			hasCollectedField(ctx, pageInfoField) {
			count, err := r.Count(ctx)
			if err != nil {
				return nil, err
			}
			conn.TotalCount = count
			conn.PageInfo.HasNextPage = first != nil && count > 0
			conn.PageInfo.HasPreviousPage = last != nil && count > 0
		}
		return conn, nil
	}

	if (after != nil || first != nil || before != nil || last != nil) && hasCollectedField(ctx, totalCountField) {
		count, err := r.Clone().Count(ctx)
		if err != nil {
			return nil, err
		}
		conn.TotalCount = count
	}

	r = pager.applyCursors(r, after, before)
	r = pager.applyOrder(r, last != nil)
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	if limit > 0 {
		r = r.Limit(limit)
	}

	if field := getCollectedField(ctx, edgesField, nodeField); field != nil {
		r = r.collectField(graphql.GetOperationContext(ctx), *field)
	}

	nodes, err := r.All(ctx)
	if err != nil || len(nodes) == 0 {
		return conn, err
	}

	if len(nodes) == limit {
		conn.PageInfo.HasNextPage = first != nil
		conn.PageInfo.HasPreviousPage = last != nil
		nodes = nodes[:len(nodes)-1]
	}

	var nodeAt func(int) *Room
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Room {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Room {
			return nodes[i]
		}
	}

	conn.Edges = make([]*RoomEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		conn.Edges[i] = &RoomEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}

	conn.PageInfo.StartCursor = &conn.Edges[0].Cursor
	conn.PageInfo.EndCursor = &conn.Edges[len(conn.Edges)-1].Cursor
	if conn.TotalCount == 0 {
		conn.TotalCount = len(nodes)
	}

	return conn, nil
}

// RoomOrderField defines the ordering field of Room.
type RoomOrderField struct {
	field    string
	toCursor func(*Room) Cursor
}

// RoomOrder defines the ordering of Room.
type RoomOrder struct {
	Direction OrderDirection  `json:"direction"`
	Field     *RoomOrderField `json:"field"`
}

// DefaultRoomOrder is the default ordering of Room.
var DefaultRoomOrder = &RoomOrder{
	Direction: OrderDirectionAsc,
	Field: &RoomOrderField{
		field: room.FieldID,
		toCursor: func(r *Room) Cursor {
			return Cursor{ID: r.ID}
		},
	},
}

// ToEdge converts Room into RoomEdge.
func (r *Room) ToEdge(order *RoomOrder) *RoomEdge {
	if order == nil {
		order = DefaultRoomOrder
	}
	return &RoomEdge{
		Node:   r,
		Cursor: order.Field.toCursor(r),
	}
}

// ScheduleEdge is the edge representation of Schedule.
type ScheduleEdge struct {
	Node   *Schedule `json:"node"`
	Cursor Cursor    `json:"cursor"`
}

// ScheduleConnection is the connection containing edges to Schedule.
type ScheduleConnection struct {
	Edges      []*ScheduleEdge `json:"edges"`
	PageInfo   PageInfo        `json:"pageInfo"`
	TotalCount int             `json:"totalCount"`
}

// SchedulePaginateOption enables pagination customization.
type SchedulePaginateOption func(*schedulePager) error

// WithScheduleOrder configures pagination ordering.
func WithScheduleOrder(order *ScheduleOrder) SchedulePaginateOption {
	if order == nil {
		order = DefaultScheduleOrder
	}
	o := *order
	return func(pager *schedulePager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultScheduleOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithScheduleFilter configures pagination filter.
func WithScheduleFilter(filter func(*ScheduleQuery) (*ScheduleQuery, error)) SchedulePaginateOption {
	return func(pager *schedulePager) error {
		if filter == nil {
			return errors.New("ScheduleQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type schedulePager struct {
	order  *ScheduleOrder
	filter func(*ScheduleQuery) (*ScheduleQuery, error)
}

func newSchedulePager(opts []SchedulePaginateOption) (*schedulePager, error) {
	pager := &schedulePager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultScheduleOrder
	}
	return pager, nil
}

func (p *schedulePager) applyFilter(query *ScheduleQuery) (*ScheduleQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *schedulePager) toCursor(s *Schedule) Cursor {
	return p.order.Field.toCursor(s)
}

func (p *schedulePager) applyCursors(query *ScheduleQuery, after, before *Cursor) *ScheduleQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultScheduleOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *schedulePager) applyOrder(query *ScheduleQuery, reverse bool) *ScheduleQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultScheduleOrder.Field {
		query = query.Order(direction.orderFunc(DefaultScheduleOrder.Field.field))
	}
	return query
}

// Paginate executes the query and returns a relay based cursor connection to Schedule.
func (s *ScheduleQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...SchedulePaginateOption,
) (*ScheduleConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newSchedulePager(opts)
	if err != nil {
		return nil, err
	}

	if s, err = pager.applyFilter(s); err != nil {
		return nil, err
	}

	conn := &ScheduleConnection{Edges: []*ScheduleEdge{}}
	if !hasCollectedField(ctx, edgesField) || first != nil && *first == 0 || last != nil && *last == 0 {
		if hasCollectedField(ctx, totalCountField) ||
			hasCollectedField(ctx, pageInfoField) {
			count, err := s.Count(ctx)
			if err != nil {
				return nil, err
			}
			conn.TotalCount = count
			conn.PageInfo.HasNextPage = first != nil && count > 0
			conn.PageInfo.HasPreviousPage = last != nil && count > 0
		}
		return conn, nil
	}

	if (after != nil || first != nil || before != nil || last != nil) && hasCollectedField(ctx, totalCountField) {
		count, err := s.Clone().Count(ctx)
		if err != nil {
			return nil, err
		}
		conn.TotalCount = count
	}

	s = pager.applyCursors(s, after, before)
	s = pager.applyOrder(s, last != nil)
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	if limit > 0 {
		s = s.Limit(limit)
	}

	if field := getCollectedField(ctx, edgesField, nodeField); field != nil {
		s = s.collectField(graphql.GetOperationContext(ctx), *field)
	}

	nodes, err := s.All(ctx)
	if err != nil || len(nodes) == 0 {
		return conn, err
	}

	if len(nodes) == limit {
		conn.PageInfo.HasNextPage = first != nil
		conn.PageInfo.HasPreviousPage = last != nil
		nodes = nodes[:len(nodes)-1]
	}

	var nodeAt func(int) *Schedule
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Schedule {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Schedule {
			return nodes[i]
		}
	}

	conn.Edges = make([]*ScheduleEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		conn.Edges[i] = &ScheduleEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}

	conn.PageInfo.StartCursor = &conn.Edges[0].Cursor
	conn.PageInfo.EndCursor = &conn.Edges[len(conn.Edges)-1].Cursor
	if conn.TotalCount == 0 {
		conn.TotalCount = len(nodes)
	}

	return conn, nil
}

var (
	// ScheduleOrderFieldDayOfWeek orders Schedule by day_of_week.
	ScheduleOrderFieldDayOfWeek = &ScheduleOrderField{
		field: schedule.FieldDayOfWeek,
		toCursor: func(s *Schedule) Cursor {
			return Cursor{
				ID:    s.ID,
				Value: s.DayOfWeek,
			}
		},
	}
	// ScheduleOrderFieldStartTime orders Schedule by start_time.
	ScheduleOrderFieldStartTime = &ScheduleOrderField{
		field: schedule.FieldStartTime,
		toCursor: func(s *Schedule) Cursor {
			return Cursor{
				ID:    s.ID,
				Value: s.StartTime,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f ScheduleOrderField) String() string {
	var str string
	switch f.field {
	case schedule.FieldDayOfWeek:
		str = "DAY_OF_WEEK"
	case schedule.FieldStartTime:
		str = "START_TIME"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f ScheduleOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *ScheduleOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("ScheduleOrderField %T must be a string", v)
	}
	switch str {
	case "DAY_OF_WEEK":
		*f = *ScheduleOrderFieldDayOfWeek
	case "START_TIME":
		*f = *ScheduleOrderFieldStartTime
	default:
		return fmt.Errorf("%s is not a valid ScheduleOrderField", str)
	}
	return nil
}

// ScheduleOrderField defines the ordering field of Schedule.
type ScheduleOrderField struct {
	field    string
	toCursor func(*Schedule) Cursor
}

// ScheduleOrder defines the ordering of Schedule.
type ScheduleOrder struct {
	Direction OrderDirection      `json:"direction"`
	Field     *ScheduleOrderField `json:"field"`
}

// DefaultScheduleOrder is the default ordering of Schedule.
var DefaultScheduleOrder = &ScheduleOrder{
	Direction: OrderDirectionAsc,
	Field: &ScheduleOrderField{
		field: schedule.FieldID,
		toCursor: func(s *Schedule) Cursor {
			return Cursor{ID: s.ID}
		},
	},
}

// ToEdge converts Schedule into ScheduleEdge.
func (s *Schedule) ToEdge(order *ScheduleOrder) *ScheduleEdge {
	if order == nil {
		order = DefaultScheduleOrder
	}
	return &ScheduleEdge{
		Node:   s,
		Cursor: order.Field.toCursor(s),
	}
}

// SchoolEdge is the edge representation of School.
type SchoolEdge struct {
	Node   *School `json:"node"`
	Cursor Cursor  `json:"cursor"`
}

// SchoolConnection is the connection containing edges to School.
type SchoolConnection struct {
	Edges      []*SchoolEdge `json:"edges"`
	PageInfo   PageInfo      `json:"pageInfo"`
	TotalCount int           `json:"totalCount"`
}

// SchoolPaginateOption enables pagination customization.
type SchoolPaginateOption func(*schoolPager) error

// WithSchoolOrder configures pagination ordering.
func WithSchoolOrder(order *SchoolOrder) SchoolPaginateOption {
	if order == nil {
		order = DefaultSchoolOrder
	}
	o := *order
	return func(pager *schoolPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultSchoolOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithSchoolFilter configures pagination filter.
func WithSchoolFilter(filter func(*SchoolQuery) (*SchoolQuery, error)) SchoolPaginateOption {
	return func(pager *schoolPager) error {
		if filter == nil {
			return errors.New("SchoolQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type schoolPager struct {
	order  *SchoolOrder
	filter func(*SchoolQuery) (*SchoolQuery, error)
}

func newSchoolPager(opts []SchoolPaginateOption) (*schoolPager, error) {
	pager := &schoolPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultSchoolOrder
	}
	return pager, nil
}

func (p *schoolPager) applyFilter(query *SchoolQuery) (*SchoolQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *schoolPager) toCursor(s *School) Cursor {
	return p.order.Field.toCursor(s)
}

func (p *schoolPager) applyCursors(query *SchoolQuery, after, before *Cursor) *SchoolQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultSchoolOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *schoolPager) applyOrder(query *SchoolQuery, reverse bool) *SchoolQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultSchoolOrder.Field {
		query = query.Order(direction.orderFunc(DefaultSchoolOrder.Field.field))
	}
	return query
}

// Paginate executes the query and returns a relay based cursor connection to School.
func (s *SchoolQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...SchoolPaginateOption,
) (*SchoolConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newSchoolPager(opts)
	if err != nil {
		return nil, err
	}

	if s, err = pager.applyFilter(s); err != nil {
		return nil, err
	}

	conn := &SchoolConnection{Edges: []*SchoolEdge{}}
	if !hasCollectedField(ctx, edgesField) || first != nil && *first == 0 || last != nil && *last == 0 {
		if hasCollectedField(ctx, totalCountField) ||
			hasCollectedField(ctx, pageInfoField) {
			count, err := s.Count(ctx)
			if err != nil {
				return nil, err
			}
			conn.TotalCount = count
			conn.PageInfo.HasNextPage = first != nil && count > 0
			conn.PageInfo.HasPreviousPage = last != nil && count > 0
		}
		return conn, nil
	}

	if (after != nil || first != nil || before != nil || last != nil) && hasCollectedField(ctx, totalCountField) {
		count, err := s.Clone().Count(ctx)
		if err != nil {
			return nil, err
		}
		conn.TotalCount = count
	}

	s = pager.applyCursors(s, after, before)
	s = pager.applyOrder(s, last != nil)
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	if limit > 0 {
		s = s.Limit(limit)
	}

	if field := getCollectedField(ctx, edgesField, nodeField); field != nil {
		s = s.collectField(graphql.GetOperationContext(ctx), *field)
	}

	nodes, err := s.All(ctx)
	if err != nil || len(nodes) == 0 {
		return conn, err
	}

	if len(nodes) == limit {
		conn.PageInfo.HasNextPage = first != nil
		conn.PageInfo.HasPreviousPage = last != nil
		nodes = nodes[:len(nodes)-1]
	}

	var nodeAt func(int) *School
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *School {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *School {
			return nodes[i]
		}
	}

	conn.Edges = make([]*SchoolEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		conn.Edges[i] = &SchoolEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}

	conn.PageInfo.StartCursor = &conn.Edges[0].Cursor
	conn.PageInfo.EndCursor = &conn.Edges[len(conn.Edges)-1].Cursor
	if conn.TotalCount == 0 {
		conn.TotalCount = len(nodes)
	}

	return conn, nil
}

// SchoolOrderField defines the ordering field of School.
type SchoolOrderField struct {
	field    string
	toCursor func(*School) Cursor
}

// SchoolOrder defines the ordering of School.
type SchoolOrder struct {
	Direction OrderDirection    `json:"direction"`
	Field     *SchoolOrderField `json:"field"`
}

// DefaultSchoolOrder is the default ordering of School.
var DefaultSchoolOrder = &SchoolOrder{
	Direction: OrderDirectionAsc,
	Field: &SchoolOrderField{
		field: school.FieldID,
		toCursor: func(s *School) Cursor {
			return Cursor{ID: s.ID}
		},
	},
}

// ToEdge converts School into SchoolEdge.
func (s *School) ToEdge(order *SchoolOrder) *SchoolEdge {
	if order == nil {
		order = DefaultSchoolOrder
	}
	return &SchoolEdge{
		Node:   s,
		Cursor: order.Field.toCursor(s),
	}
}

// StudioEdge is the edge representation of Studio.
type StudioEdge struct {
	Node   *Studio `json:"node"`
	Cursor Cursor  `json:"cursor"`
}

// StudioConnection is the connection containing edges to Studio.
type StudioConnection struct {
	Edges      []*StudioEdge `json:"edges"`
	PageInfo   PageInfo      `json:"pageInfo"`
	TotalCount int           `json:"totalCount"`
}

// StudioPaginateOption enables pagination customization.
type StudioPaginateOption func(*studioPager) error

// WithStudioOrder configures pagination ordering.
func WithStudioOrder(order *StudioOrder) StudioPaginateOption {
	if order == nil {
		order = DefaultStudioOrder
	}
	o := *order
	return func(pager *studioPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultStudioOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithStudioFilter configures pagination filter.
func WithStudioFilter(filter func(*StudioQuery) (*StudioQuery, error)) StudioPaginateOption {
	return func(pager *studioPager) error {
		if filter == nil {
			return errors.New("StudioQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type studioPager struct {
	order  *StudioOrder
	filter func(*StudioQuery) (*StudioQuery, error)
}

func newStudioPager(opts []StudioPaginateOption) (*studioPager, error) {
	pager := &studioPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultStudioOrder
	}
	return pager, nil
}

func (p *studioPager) applyFilter(query *StudioQuery) (*StudioQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *studioPager) toCursor(s *Studio) Cursor {
	return p.order.Field.toCursor(s)
}

func (p *studioPager) applyCursors(query *StudioQuery, after, before *Cursor) *StudioQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultStudioOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *studioPager) applyOrder(query *StudioQuery, reverse bool) *StudioQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultStudioOrder.Field {
		query = query.Order(direction.orderFunc(DefaultStudioOrder.Field.field))
	}
	return query
}

// Paginate executes the query and returns a relay based cursor connection to Studio.
func (s *StudioQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...StudioPaginateOption,
) (*StudioConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newStudioPager(opts)
	if err != nil {
		return nil, err
	}

	if s, err = pager.applyFilter(s); err != nil {
		return nil, err
	}

	conn := &StudioConnection{Edges: []*StudioEdge{}}
	if !hasCollectedField(ctx, edgesField) || first != nil && *first == 0 || last != nil && *last == 0 {
		if hasCollectedField(ctx, totalCountField) ||
			hasCollectedField(ctx, pageInfoField) {
			count, err := s.Count(ctx)
			if err != nil {
				return nil, err
			}
			conn.TotalCount = count
			conn.PageInfo.HasNextPage = first != nil && count > 0
			conn.PageInfo.HasPreviousPage = last != nil && count > 0
		}
		return conn, nil
	}

	if (after != nil || first != nil || before != nil || last != nil) && hasCollectedField(ctx, totalCountField) {
		count, err := s.Clone().Count(ctx)
		if err != nil {
			return nil, err
		}
		conn.TotalCount = count
	}

	s = pager.applyCursors(s, after, before)
	s = pager.applyOrder(s, last != nil)
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	if limit > 0 {
		s = s.Limit(limit)
	}

	if field := getCollectedField(ctx, edgesField, nodeField); field != nil {
		s = s.collectField(graphql.GetOperationContext(ctx), *field)
	}

	nodes, err := s.All(ctx)
	if err != nil || len(nodes) == 0 {
		return conn, err
	}

	if len(nodes) == limit {
		conn.PageInfo.HasNextPage = first != nil
		conn.PageInfo.HasPreviousPage = last != nil
		nodes = nodes[:len(nodes)-1]
	}

	var nodeAt func(int) *Studio
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Studio {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Studio {
			return nodes[i]
		}
	}

	conn.Edges = make([]*StudioEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		conn.Edges[i] = &StudioEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}

	conn.PageInfo.StartCursor = &conn.Edges[0].Cursor
	conn.PageInfo.EndCursor = &conn.Edges[len(conn.Edges)-1].Cursor
	if conn.TotalCount == 0 {
		conn.TotalCount = len(nodes)
	}

	return conn, nil
}

// StudioOrderField defines the ordering field of Studio.
type StudioOrderField struct {
	field    string
	toCursor func(*Studio) Cursor
}

// StudioOrder defines the ordering of Studio.
type StudioOrder struct {
	Direction OrderDirection    `json:"direction"`
	Field     *StudioOrderField `json:"field"`
}

// DefaultStudioOrder is the default ordering of Studio.
var DefaultStudioOrder = &StudioOrder{
	Direction: OrderDirectionAsc,
	Field: &StudioOrderField{
		field: studio.FieldID,
		toCursor: func(s *Studio) Cursor {
			return Cursor{ID: s.ID}
		},
	},
}

// ToEdge converts Studio into StudioEdge.
func (s *Studio) ToEdge(order *StudioOrder) *StudioEdge {
	if order == nil {
		order = DefaultStudioOrder
	}
	return &StudioEdge{
		Node:   s,
		Cursor: order.Field.toCursor(s),
	}
}

// UserEdge is the edge representation of User.
type UserEdge struct {
	Node   *User  `json:"node"`
	Cursor Cursor `json:"cursor"`
}

// UserConnection is the connection containing edges to User.
type UserConnection struct {
	Edges      []*UserEdge `json:"edges"`
	PageInfo   PageInfo    `json:"pageInfo"`
	TotalCount int         `json:"totalCount"`
}

// UserPaginateOption enables pagination customization.
type UserPaginateOption func(*userPager) error

// WithUserOrder configures pagination ordering.
func WithUserOrder(order *UserOrder) UserPaginateOption {
	if order == nil {
		order = DefaultUserOrder
	}
	o := *order
	return func(pager *userPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultUserOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithUserFilter configures pagination filter.
func WithUserFilter(filter func(*UserQuery) (*UserQuery, error)) UserPaginateOption {
	return func(pager *userPager) error {
		if filter == nil {
			return errors.New("UserQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type userPager struct {
	order  *UserOrder
	filter func(*UserQuery) (*UserQuery, error)
}

func newUserPager(opts []UserPaginateOption) (*userPager, error) {
	pager := &userPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultUserOrder
	}
	return pager, nil
}

func (p *userPager) applyFilter(query *UserQuery) (*UserQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *userPager) toCursor(u *User) Cursor {
	return p.order.Field.toCursor(u)
}

func (p *userPager) applyCursors(query *UserQuery, after, before *Cursor) *UserQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultUserOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *userPager) applyOrder(query *UserQuery, reverse bool) *UserQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultUserOrder.Field {
		query = query.Order(direction.orderFunc(DefaultUserOrder.Field.field))
	}
	return query
}

// Paginate executes the query and returns a relay based cursor connection to User.
func (u *UserQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...UserPaginateOption,
) (*UserConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newUserPager(opts)
	if err != nil {
		return nil, err
	}

	if u, err = pager.applyFilter(u); err != nil {
		return nil, err
	}

	conn := &UserConnection{Edges: []*UserEdge{}}
	if !hasCollectedField(ctx, edgesField) || first != nil && *first == 0 || last != nil && *last == 0 {
		if hasCollectedField(ctx, totalCountField) ||
			hasCollectedField(ctx, pageInfoField) {
			count, err := u.Count(ctx)
			if err != nil {
				return nil, err
			}
			conn.TotalCount = count
			conn.PageInfo.HasNextPage = first != nil && count > 0
			conn.PageInfo.HasPreviousPage = last != nil && count > 0
		}
		return conn, nil
	}

	if (after != nil || first != nil || before != nil || last != nil) && hasCollectedField(ctx, totalCountField) {
		count, err := u.Clone().Count(ctx)
		if err != nil {
			return nil, err
		}
		conn.TotalCount = count
	}

	u = pager.applyCursors(u, after, before)
	u = pager.applyOrder(u, last != nil)
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	if limit > 0 {
		u = u.Limit(limit)
	}

	if field := getCollectedField(ctx, edgesField, nodeField); field != nil {
		u = u.collectField(graphql.GetOperationContext(ctx), *field)
	}

	nodes, err := u.All(ctx)
	if err != nil || len(nodes) == 0 {
		return conn, err
	}

	if len(nodes) == limit {
		conn.PageInfo.HasNextPage = first != nil
		conn.PageInfo.HasPreviousPage = last != nil
		nodes = nodes[:len(nodes)-1]
	}

	var nodeAt func(int) *User
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *User {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *User {
			return nodes[i]
		}
	}

	conn.Edges = make([]*UserEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		conn.Edges[i] = &UserEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}

	conn.PageInfo.StartCursor = &conn.Edges[0].Cursor
	conn.PageInfo.EndCursor = &conn.Edges[len(conn.Edges)-1].Cursor
	if conn.TotalCount == 0 {
		conn.TotalCount = len(nodes)
	}

	return conn, nil
}

// UserOrderField defines the ordering field of User.
type UserOrderField struct {
	field    string
	toCursor func(*User) Cursor
}

// UserOrder defines the ordering of User.
type UserOrder struct {
	Direction OrderDirection  `json:"direction"`
	Field     *UserOrderField `json:"field"`
}

// DefaultUserOrder is the default ordering of User.
var DefaultUserOrder = &UserOrder{
	Direction: OrderDirectionAsc,
	Field: &UserOrderField{
		field: user.FieldID,
		toCursor: func(u *User) Cursor {
			return Cursor{ID: u.ID}
		},
	},
}

// ToEdge converts User into UserEdge.
func (u *User) ToEdge(order *UserOrder) *UserEdge {
	if order == nil {
		order = DefaultUserOrder
	}
	return &UserEdge{
		Node:   u,
		Cursor: order.Field.toCursor(u),
	}
}
