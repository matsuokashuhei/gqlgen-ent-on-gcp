// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/matsuokashuhei/landin/ent/member"
)

// Member is the model entity for the Member schema.
type Member struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Number holds the value of the "number" field.
	Number int `json:"number,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Kana holds the value of the "kana" field.
	Kana string `json:"kana,omitempty"`
	// Gender holds the value of the "gender" field.
	Gender member.Gender `json:"gender,omitempty"`
	// DateOfBirth holds the value of the "date_of_birth" field.
	DateOfBirth time.Time `json:"date_of_birth,omitempty"`
	// PhoneNumber holds the value of the "phone_number" field.
	PhoneNumber string `json:"phone_number,omitempty"`
	// Email holds the value of the "email" field.
	Email string `json:"email,omitempty"`
	// DateOfAdmission holds the value of the "date_of_admission" field.
	DateOfAdmission time.Time `json:"date_of_admission,omitempty"`
	// DateOfWithdrawal holds the value of the "date_of_withdrawal" field.
	DateOfWithdrawal time.Time `json:"date_of_withdrawal,omitempty"`
	// Memo holds the value of the "memo" field.
	Memo string `json:"memo,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MemberQuery when eager-loading is set.
	Edges MemberEdges `json:"edges"`
}

// MemberEdges holds the relations/edges for other nodes in the graph.
type MemberEdges struct {
	// MembersClasses holds the value of the members_classes edge.
	MembersClasses []*MembersClass `json:"members_classes,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// MembersClassesOrErr returns the MembersClasses value or an error if the edge
// was not loaded in eager-loading.
func (e MemberEdges) MembersClassesOrErr() ([]*MembersClass, error) {
	if e.loadedTypes[0] {
		return e.MembersClasses, nil
	}
	return nil, &NotLoadedError{edge: "members_classes"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Member) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case member.FieldID, member.FieldNumber:
			values[i] = new(sql.NullInt64)
		case member.FieldName, member.FieldKana, member.FieldGender, member.FieldPhoneNumber, member.FieldEmail, member.FieldMemo:
			values[i] = new(sql.NullString)
		case member.FieldCreateTime, member.FieldUpdateTime, member.FieldDateOfBirth, member.FieldDateOfAdmission, member.FieldDateOfWithdrawal:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Member", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Member fields.
func (m *Member) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case member.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			m.ID = int(value.Int64)
		case member.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				m.CreateTime = value.Time
			}
		case member.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				m.UpdateTime = value.Time
			}
		case member.FieldNumber:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field number", values[i])
			} else if value.Valid {
				m.Number = int(value.Int64)
			}
		case member.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				m.Name = value.String
			}
		case member.FieldKana:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field kana", values[i])
			} else if value.Valid {
				m.Kana = value.String
			}
		case member.FieldGender:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field gender", values[i])
			} else if value.Valid {
				m.Gender = member.Gender(value.String)
			}
		case member.FieldDateOfBirth:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field date_of_birth", values[i])
			} else if value.Valid {
				m.DateOfBirth = value.Time
			}
		case member.FieldPhoneNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field phone_number", values[i])
			} else if value.Valid {
				m.PhoneNumber = value.String
			}
		case member.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				m.Email = value.String
			}
		case member.FieldDateOfAdmission:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field date_of_admission", values[i])
			} else if value.Valid {
				m.DateOfAdmission = value.Time
			}
		case member.FieldDateOfWithdrawal:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field date_of_withdrawal", values[i])
			} else if value.Valid {
				m.DateOfWithdrawal = value.Time
			}
		case member.FieldMemo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field memo", values[i])
			} else if value.Valid {
				m.Memo = value.String
			}
		}
	}
	return nil
}

// QueryMembersClasses queries the "members_classes" edge of the Member entity.
func (m *Member) QueryMembersClasses() *MembersClassQuery {
	return (&MemberClient{config: m.config}).QueryMembersClasses(m)
}

// Update returns a builder for updating this Member.
// Note that you need to call Member.Unwrap() before calling this method if this Member
// was returned from a transaction, and the transaction was committed or rolled back.
func (m *Member) Update() *MemberUpdateOne {
	return (&MemberClient{config: m.config}).UpdateOne(m)
}

// Unwrap unwraps the Member entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (m *Member) Unwrap() *Member {
	tx, ok := m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Member is not a transactional entity")
	}
	m.config.driver = tx.drv
	return m
}

// String implements the fmt.Stringer.
func (m *Member) String() string {
	var builder strings.Builder
	builder.WriteString("Member(")
	builder.WriteString(fmt.Sprintf("id=%v", m.ID))
	builder.WriteString(", create_time=")
	builder.WriteString(m.CreateTime.Format(time.ANSIC))
	builder.WriteString(", update_time=")
	builder.WriteString(m.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", number=")
	builder.WriteString(fmt.Sprintf("%v", m.Number))
	builder.WriteString(", name=")
	builder.WriteString(m.Name)
	builder.WriteString(", kana=")
	builder.WriteString(m.Kana)
	builder.WriteString(", gender=")
	builder.WriteString(fmt.Sprintf("%v", m.Gender))
	builder.WriteString(", date_of_birth=")
	builder.WriteString(m.DateOfBirth.Format(time.ANSIC))
	builder.WriteString(", phone_number=")
	builder.WriteString(m.PhoneNumber)
	builder.WriteString(", email=")
	builder.WriteString(m.Email)
	builder.WriteString(", date_of_admission=")
	builder.WriteString(m.DateOfAdmission.Format(time.ANSIC))
	builder.WriteString(", date_of_withdrawal=")
	builder.WriteString(m.DateOfWithdrawal.Format(time.ANSIC))
	builder.WriteString(", memo=")
	builder.WriteString(m.Memo)
	builder.WriteByte(')')
	return builder.String()
}

// Members is a parsable slice of Member.
type Members []*Member

func (m Members) config(cfg config) {
	for _i := range m {
		m[_i].config = cfg
	}
}
