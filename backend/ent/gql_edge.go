// Code generated by entc, DO NOT EDIT.

package ent

import "context"

func (c *Class) Schedule(ctx context.Context) (*Schedule, error) {
	result, err := c.Edges.ScheduleOrErr()
	if IsNotLoaded(err) {
		result, err = c.QuerySchedule().Only(ctx)
	}
	return result, err
}

func (c *Class) Instructor(ctx context.Context) (*Instructor, error) {
	result, err := c.Edges.InstructorOrErr()
	if IsNotLoaded(err) {
		result, err = c.QueryInstructor().Only(ctx)
	}
	return result, err
}

func (i *Instructor) Classes(ctx context.Context) ([]*Class, error) {
	result, err := i.Edges.ClassesOrErr()
	if IsNotLoaded(err) {
		result, err = i.QueryClasses().All(ctx)
	}
	return result, err
}

func (r *Room) Studio(ctx context.Context) (*Studio, error) {
	result, err := r.Edges.StudioOrErr()
	if IsNotLoaded(err) {
		result, err = r.QueryStudio().Only(ctx)
	}
	return result, err
}

func (r *Room) Schedules(ctx context.Context) ([]*Schedule, error) {
	result, err := r.Edges.SchedulesOrErr()
	if IsNotLoaded(err) {
		result, err = r.QuerySchedules().All(ctx)
	}
	return result, err
}

func (s *Schedule) Room(ctx context.Context) (*Room, error) {
	result, err := s.Edges.RoomOrErr()
	if IsNotLoaded(err) {
		result, err = s.QueryRoom().Only(ctx)
	}
	return result, err
}

func (s *Schedule) Classes(ctx context.Context) ([]*Class, error) {
	result, err := s.Edges.ClassesOrErr()
	if IsNotLoaded(err) {
		result, err = s.QueryClasses().All(ctx)
	}
	return result, err
}

func (s *Schedule) Class(ctx context.Context) (*Class, error) {
	result, err := s.Edges.ClassOrErr()
	if IsNotLoaded(err) {
		result, err = s.QueryClass().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (s *School) Studios(ctx context.Context) ([]*Studio, error) {
	result, err := s.Edges.StudiosOrErr()
	if IsNotLoaded(err) {
		result, err = s.QueryStudios().All(ctx)
	}
	return result, err
}

func (s *Studio) School(ctx context.Context) (*School, error) {
	result, err := s.Edges.SchoolOrErr()
	if IsNotLoaded(err) {
		result, err = s.QuerySchool().Only(ctx)
	}
	return result, err
}

func (s *Studio) Rooms(ctx context.Context) ([]*Room, error) {
	result, err := s.Edges.RoomsOrErr()
	if IsNotLoaded(err) {
		result, err = s.QueryRooms().All(ctx)
	}
	return result, err
}
