// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/matsuokashuhei/landin/ent/class"
	"github.com/matsuokashuhei/landin/ent/instructor"
)

// InstructorCreate is the builder for creating a Instructor entity.
type InstructorCreate struct {
	config
	mutation *InstructorMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (ic *InstructorCreate) SetCreateTime(t time.Time) *InstructorCreate {
	ic.mutation.SetCreateTime(t)
	return ic
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (ic *InstructorCreate) SetNillableCreateTime(t *time.Time) *InstructorCreate {
	if t != nil {
		ic.SetCreateTime(*t)
	}
	return ic
}

// SetUpdateTime sets the "update_time" field.
func (ic *InstructorCreate) SetUpdateTime(t time.Time) *InstructorCreate {
	ic.mutation.SetUpdateTime(t)
	return ic
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (ic *InstructorCreate) SetNillableUpdateTime(t *time.Time) *InstructorCreate {
	if t != nil {
		ic.SetUpdateTime(*t)
	}
	return ic
}

// SetName sets the "name" field.
func (ic *InstructorCreate) SetName(s string) *InstructorCreate {
	ic.mutation.SetName(s)
	return ic
}

// SetSyllabicCharacters sets the "syllabic_characters" field.
func (ic *InstructorCreate) SetSyllabicCharacters(s string) *InstructorCreate {
	ic.mutation.SetSyllabicCharacters(s)
	return ic
}

// SetBiography sets the "biography" field.
func (ic *InstructorCreate) SetBiography(s string) *InstructorCreate {
	ic.mutation.SetBiography(s)
	return ic
}

// SetNillableBiography sets the "biography" field if the given value is not nil.
func (ic *InstructorCreate) SetNillableBiography(s *string) *InstructorCreate {
	if s != nil {
		ic.SetBiography(*s)
	}
	return ic
}

// SetPhoneNumber sets the "phone_number" field.
func (ic *InstructorCreate) SetPhoneNumber(s string) *InstructorCreate {
	ic.mutation.SetPhoneNumber(s)
	return ic
}

// SetNillablePhoneNumber sets the "phone_number" field if the given value is not nil.
func (ic *InstructorCreate) SetNillablePhoneNumber(s *string) *InstructorCreate {
	if s != nil {
		ic.SetPhoneNumber(*s)
	}
	return ic
}

// SetEmail sets the "email" field.
func (ic *InstructorCreate) SetEmail(s string) *InstructorCreate {
	ic.mutation.SetEmail(s)
	return ic
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (ic *InstructorCreate) SetNillableEmail(s *string) *InstructorCreate {
	if s != nil {
		ic.SetEmail(*s)
	}
	return ic
}

// AddClassIDs adds the "classes" edge to the Class entity by IDs.
func (ic *InstructorCreate) AddClassIDs(ids ...int) *InstructorCreate {
	ic.mutation.AddClassIDs(ids...)
	return ic
}

// AddClasses adds the "classes" edges to the Class entity.
func (ic *InstructorCreate) AddClasses(c ...*Class) *InstructorCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ic.AddClassIDs(ids...)
}

// Mutation returns the InstructorMutation object of the builder.
func (ic *InstructorCreate) Mutation() *InstructorMutation {
	return ic.mutation
}

// Save creates the Instructor in the database.
func (ic *InstructorCreate) Save(ctx context.Context) (*Instructor, error) {
	var (
		err  error
		node *Instructor
	)
	ic.defaults()
	if len(ic.hooks) == 0 {
		if err = ic.check(); err != nil {
			return nil, err
		}
		node, err = ic.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*InstructorMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ic.check(); err != nil {
				return nil, err
			}
			ic.mutation = mutation
			if node, err = ic.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(ic.hooks) - 1; i >= 0; i-- {
			if ic.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ic.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ic.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ic *InstructorCreate) SaveX(ctx context.Context) *Instructor {
	v, err := ic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ic *InstructorCreate) Exec(ctx context.Context) error {
	_, err := ic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ic *InstructorCreate) ExecX(ctx context.Context) {
	if err := ic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ic *InstructorCreate) defaults() {
	if _, ok := ic.mutation.CreateTime(); !ok {
		v := instructor.DefaultCreateTime()
		ic.mutation.SetCreateTime(v)
	}
	if _, ok := ic.mutation.UpdateTime(); !ok {
		v := instructor.DefaultUpdateTime()
		ic.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ic *InstructorCreate) check() error {
	if _, ok := ic.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "Instructor.create_time"`)}
	}
	if _, ok := ic.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "Instructor.update_time"`)}
	}
	if _, ok := ic.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Instructor.name"`)}
	}
	if _, ok := ic.mutation.SyllabicCharacters(); !ok {
		return &ValidationError{Name: "syllabic_characters", err: errors.New(`ent: missing required field "Instructor.syllabic_characters"`)}
	}
	return nil
}

func (ic *InstructorCreate) sqlSave(ctx context.Context) (*Instructor, error) {
	_node, _spec := ic.createSpec()
	if err := sqlgraph.CreateNode(ctx, ic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (ic *InstructorCreate) createSpec() (*Instructor, *sqlgraph.CreateSpec) {
	var (
		_node = &Instructor{config: ic.config}
		_spec = &sqlgraph.CreateSpec{
			Table: instructor.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: instructor.FieldID,
			},
		}
	)
	if value, ok := ic.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: instructor.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	if value, ok := ic.mutation.UpdateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: instructor.FieldUpdateTime,
		})
		_node.UpdateTime = value
	}
	if value, ok := ic.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: instructor.FieldName,
		})
		_node.Name = value
	}
	if value, ok := ic.mutation.SyllabicCharacters(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: instructor.FieldSyllabicCharacters,
		})
		_node.SyllabicCharacters = value
	}
	if value, ok := ic.mutation.Biography(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: instructor.FieldBiography,
		})
		_node.Biography = value
	}
	if value, ok := ic.mutation.PhoneNumber(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: instructor.FieldPhoneNumber,
		})
		_node.PhoneNumber = value
	}
	if value, ok := ic.mutation.Email(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: instructor.FieldEmail,
		})
		_node.Email = value
	}
	if nodes := ic.mutation.ClassesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   instructor.ClassesTable,
			Columns: []string{instructor.ClassesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: class.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// InstructorCreateBulk is the builder for creating many Instructor entities in bulk.
type InstructorCreateBulk struct {
	config
	builders []*InstructorCreate
}

// Save creates the Instructor entities in the database.
func (icb *InstructorCreateBulk) Save(ctx context.Context) ([]*Instructor, error) {
	specs := make([]*sqlgraph.CreateSpec, len(icb.builders))
	nodes := make([]*Instructor, len(icb.builders))
	mutators := make([]Mutator, len(icb.builders))
	for i := range icb.builders {
		func(i int, root context.Context) {
			builder := icb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*InstructorMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, icb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, icb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, icb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (icb *InstructorCreateBulk) SaveX(ctx context.Context) []*Instructor {
	v, err := icb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (icb *InstructorCreateBulk) Exec(ctx context.Context) error {
	_, err := icb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (icb *InstructorCreateBulk) ExecX(ctx context.Context) {
	if err := icb.Exec(ctx); err != nil {
		panic(err)
	}
}
