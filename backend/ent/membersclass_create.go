// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/matsuokashuhei/landin/ent/class"
	"github.com/matsuokashuhei/landin/ent/member"
	"github.com/matsuokashuhei/landin/ent/membersclass"
)

// MembersClassCreate is the builder for creating a MembersClass entity.
type MembersClassCreate struct {
	config
	mutation *MembersClassMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (mcc *MembersClassCreate) SetCreateTime(t time.Time) *MembersClassCreate {
	mcc.mutation.SetCreateTime(t)
	return mcc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (mcc *MembersClassCreate) SetNillableCreateTime(t *time.Time) *MembersClassCreate {
	if t != nil {
		mcc.SetCreateTime(*t)
	}
	return mcc
}

// SetUpdateTime sets the "update_time" field.
func (mcc *MembersClassCreate) SetUpdateTime(t time.Time) *MembersClassCreate {
	mcc.mutation.SetUpdateTime(t)
	return mcc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (mcc *MembersClassCreate) SetNillableUpdateTime(t *time.Time) *MembersClassCreate {
	if t != nil {
		mcc.SetUpdateTime(*t)
	}
	return mcc
}

// SetDateOfAdmission sets the "date_of_admission" field.
func (mcc *MembersClassCreate) SetDateOfAdmission(t time.Time) *MembersClassCreate {
	mcc.mutation.SetDateOfAdmission(t)
	return mcc
}

// SetDateOfWithdrawal sets the "date_of_withdrawal" field.
func (mcc *MembersClassCreate) SetDateOfWithdrawal(t time.Time) *MembersClassCreate {
	mcc.mutation.SetDateOfWithdrawal(t)
	return mcc
}

// SetNillableDateOfWithdrawal sets the "date_of_withdrawal" field if the given value is not nil.
func (mcc *MembersClassCreate) SetNillableDateOfWithdrawal(t *time.Time) *MembersClassCreate {
	if t != nil {
		mcc.SetDateOfWithdrawal(*t)
	}
	return mcc
}

// SetMemberID sets the "member" edge to the Member entity by ID.
func (mcc *MembersClassCreate) SetMemberID(id int) *MembersClassCreate {
	mcc.mutation.SetMemberID(id)
	return mcc
}

// SetMember sets the "member" edge to the Member entity.
func (mcc *MembersClassCreate) SetMember(m *Member) *MembersClassCreate {
	return mcc.SetMemberID(m.ID)
}

// SetClassID sets the "class" edge to the Class entity by ID.
func (mcc *MembersClassCreate) SetClassID(id int) *MembersClassCreate {
	mcc.mutation.SetClassID(id)
	return mcc
}

// SetClass sets the "class" edge to the Class entity.
func (mcc *MembersClassCreate) SetClass(c *Class) *MembersClassCreate {
	return mcc.SetClassID(c.ID)
}

// Mutation returns the MembersClassMutation object of the builder.
func (mcc *MembersClassCreate) Mutation() *MembersClassMutation {
	return mcc.mutation
}

// Save creates the MembersClass in the database.
func (mcc *MembersClassCreate) Save(ctx context.Context) (*MembersClass, error) {
	var (
		err  error
		node *MembersClass
	)
	mcc.defaults()
	if len(mcc.hooks) == 0 {
		if err = mcc.check(); err != nil {
			return nil, err
		}
		node, err = mcc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MembersClassMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = mcc.check(); err != nil {
				return nil, err
			}
			mcc.mutation = mutation
			if node, err = mcc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(mcc.hooks) - 1; i >= 0; i-- {
			if mcc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = mcc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mcc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (mcc *MembersClassCreate) SaveX(ctx context.Context) *MembersClass {
	v, err := mcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mcc *MembersClassCreate) Exec(ctx context.Context) error {
	_, err := mcc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mcc *MembersClassCreate) ExecX(ctx context.Context) {
	if err := mcc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mcc *MembersClassCreate) defaults() {
	if _, ok := mcc.mutation.CreateTime(); !ok {
		v := membersclass.DefaultCreateTime()
		mcc.mutation.SetCreateTime(v)
	}
	if _, ok := mcc.mutation.UpdateTime(); !ok {
		v := membersclass.DefaultUpdateTime()
		mcc.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mcc *MembersClassCreate) check() error {
	if _, ok := mcc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "MembersClass.create_time"`)}
	}
	if _, ok := mcc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "MembersClass.update_time"`)}
	}
	if _, ok := mcc.mutation.DateOfAdmission(); !ok {
		return &ValidationError{Name: "date_of_admission", err: errors.New(`ent: missing required field "MembersClass.date_of_admission"`)}
	}
	if _, ok := mcc.mutation.MemberID(); !ok {
		return &ValidationError{Name: "member", err: errors.New(`ent: missing required edge "MembersClass.member"`)}
	}
	if _, ok := mcc.mutation.ClassID(); !ok {
		return &ValidationError{Name: "class", err: errors.New(`ent: missing required edge "MembersClass.class"`)}
	}
	return nil
}

func (mcc *MembersClassCreate) sqlSave(ctx context.Context) (*MembersClass, error) {
	_node, _spec := mcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mcc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (mcc *MembersClassCreate) createSpec() (*MembersClass, *sqlgraph.CreateSpec) {
	var (
		_node = &MembersClass{config: mcc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: membersclass.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: membersclass.FieldID,
			},
		}
	)
	if value, ok := mcc.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: membersclass.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	if value, ok := mcc.mutation.UpdateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: membersclass.FieldUpdateTime,
		})
		_node.UpdateTime = value
	}
	if value, ok := mcc.mutation.DateOfAdmission(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: membersclass.FieldDateOfAdmission,
		})
		_node.DateOfAdmission = value
	}
	if value, ok := mcc.mutation.DateOfWithdrawal(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: membersclass.FieldDateOfWithdrawal,
		})
		_node.DateOfWithdrawal = value
	}
	if nodes := mcc.mutation.MemberIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   membersclass.MemberTable,
			Columns: []string{membersclass.MemberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: member.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.member_members_classes = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mcc.mutation.ClassIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   membersclass.ClassTable,
			Columns: []string{membersclass.ClassColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: class.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.class_members_classes = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// MembersClassCreateBulk is the builder for creating many MembersClass entities in bulk.
type MembersClassCreateBulk struct {
	config
	builders []*MembersClassCreate
}

// Save creates the MembersClass entities in the database.
func (mccb *MembersClassCreateBulk) Save(ctx context.Context) ([]*MembersClass, error) {
	specs := make([]*sqlgraph.CreateSpec, len(mccb.builders))
	nodes := make([]*MembersClass, len(mccb.builders))
	mutators := make([]Mutator, len(mccb.builders))
	for i := range mccb.builders {
		func(i int, root context.Context) {
			builder := mccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MembersClassMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mccb *MembersClassCreateBulk) SaveX(ctx context.Context) []*MembersClass {
	v, err := mccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mccb *MembersClassCreateBulk) Exec(ctx context.Context) error {
	_, err := mccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mccb *MembersClassCreateBulk) ExecX(ctx context.Context) {
	if err := mccb.Exec(ctx); err != nil {
		panic(err)
	}
}
