// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/matsuokashuhei/landin/ent/member"
	"github.com/matsuokashuhei/landin/ent/membersclass"
	"github.com/matsuokashuhei/landin/ent/predicate"
)

// MemberUpdate is the builder for updating Member entities.
type MemberUpdate struct {
	config
	hooks    []Hook
	mutation *MemberMutation
}

// Where appends a list predicates to the MemberUpdate builder.
func (mu *MemberUpdate) Where(ps ...predicate.Member) *MemberUpdate {
	mu.mutation.Where(ps...)
	return mu
}

// SetUpdateTime sets the "update_time" field.
func (mu *MemberUpdate) SetUpdateTime(t time.Time) *MemberUpdate {
	mu.mutation.SetUpdateTime(t)
	return mu
}

// SetNumber sets the "number" field.
func (mu *MemberUpdate) SetNumber(i int) *MemberUpdate {
	mu.mutation.ResetNumber()
	mu.mutation.SetNumber(i)
	return mu
}

// AddNumber adds i to the "number" field.
func (mu *MemberUpdate) AddNumber(i int) *MemberUpdate {
	mu.mutation.AddNumber(i)
	return mu
}

// SetName sets the "name" field.
func (mu *MemberUpdate) SetName(s string) *MemberUpdate {
	mu.mutation.SetName(s)
	return mu
}

// SetKana sets the "kana" field.
func (mu *MemberUpdate) SetKana(s string) *MemberUpdate {
	mu.mutation.SetKana(s)
	return mu
}

// SetGender sets the "gender" field.
func (mu *MemberUpdate) SetGender(m member.Gender) *MemberUpdate {
	mu.mutation.SetGender(m)
	return mu
}

// SetDateOfBirth sets the "date_of_birth" field.
func (mu *MemberUpdate) SetDateOfBirth(t time.Time) *MemberUpdate {
	mu.mutation.SetDateOfBirth(t)
	return mu
}

// SetNillableDateOfBirth sets the "date_of_birth" field if the given value is not nil.
func (mu *MemberUpdate) SetNillableDateOfBirth(t *time.Time) *MemberUpdate {
	if t != nil {
		mu.SetDateOfBirth(*t)
	}
	return mu
}

// ClearDateOfBirth clears the value of the "date_of_birth" field.
func (mu *MemberUpdate) ClearDateOfBirth() *MemberUpdate {
	mu.mutation.ClearDateOfBirth()
	return mu
}

// SetPhoneNumber sets the "phone_number" field.
func (mu *MemberUpdate) SetPhoneNumber(s string) *MemberUpdate {
	mu.mutation.SetPhoneNumber(s)
	return mu
}

// SetNillablePhoneNumber sets the "phone_number" field if the given value is not nil.
func (mu *MemberUpdate) SetNillablePhoneNumber(s *string) *MemberUpdate {
	if s != nil {
		mu.SetPhoneNumber(*s)
	}
	return mu
}

// ClearPhoneNumber clears the value of the "phone_number" field.
func (mu *MemberUpdate) ClearPhoneNumber() *MemberUpdate {
	mu.mutation.ClearPhoneNumber()
	return mu
}

// SetEmail sets the "email" field.
func (mu *MemberUpdate) SetEmail(s string) *MemberUpdate {
	mu.mutation.SetEmail(s)
	return mu
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (mu *MemberUpdate) SetNillableEmail(s *string) *MemberUpdate {
	if s != nil {
		mu.SetEmail(*s)
	}
	return mu
}

// ClearEmail clears the value of the "email" field.
func (mu *MemberUpdate) ClearEmail() *MemberUpdate {
	mu.mutation.ClearEmail()
	return mu
}

// SetDateOfAdmission sets the "date_of_admission" field.
func (mu *MemberUpdate) SetDateOfAdmission(t time.Time) *MemberUpdate {
	mu.mutation.SetDateOfAdmission(t)
	return mu
}

// SetDateOfWithdrawal sets the "date_of_withdrawal" field.
func (mu *MemberUpdate) SetDateOfWithdrawal(t time.Time) *MemberUpdate {
	mu.mutation.SetDateOfWithdrawal(t)
	return mu
}

// SetNillableDateOfWithdrawal sets the "date_of_withdrawal" field if the given value is not nil.
func (mu *MemberUpdate) SetNillableDateOfWithdrawal(t *time.Time) *MemberUpdate {
	if t != nil {
		mu.SetDateOfWithdrawal(*t)
	}
	return mu
}

// ClearDateOfWithdrawal clears the value of the "date_of_withdrawal" field.
func (mu *MemberUpdate) ClearDateOfWithdrawal() *MemberUpdate {
	mu.mutation.ClearDateOfWithdrawal()
	return mu
}

// SetMemo sets the "memo" field.
func (mu *MemberUpdate) SetMemo(s string) *MemberUpdate {
	mu.mutation.SetMemo(s)
	return mu
}

// SetNillableMemo sets the "memo" field if the given value is not nil.
func (mu *MemberUpdate) SetNillableMemo(s *string) *MemberUpdate {
	if s != nil {
		mu.SetMemo(*s)
	}
	return mu
}

// ClearMemo clears the value of the "memo" field.
func (mu *MemberUpdate) ClearMemo() *MemberUpdate {
	mu.mutation.ClearMemo()
	return mu
}

// AddMembersClassIDs adds the "members_classes" edge to the MembersClass entity by IDs.
func (mu *MemberUpdate) AddMembersClassIDs(ids ...int) *MemberUpdate {
	mu.mutation.AddMembersClassIDs(ids...)
	return mu
}

// AddMembersClasses adds the "members_classes" edges to the MembersClass entity.
func (mu *MemberUpdate) AddMembersClasses(m ...*MembersClass) *MemberUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mu.AddMembersClassIDs(ids...)
}

// Mutation returns the MemberMutation object of the builder.
func (mu *MemberUpdate) Mutation() *MemberMutation {
	return mu.mutation
}

// ClearMembersClasses clears all "members_classes" edges to the MembersClass entity.
func (mu *MemberUpdate) ClearMembersClasses() *MemberUpdate {
	mu.mutation.ClearMembersClasses()
	return mu
}

// RemoveMembersClassIDs removes the "members_classes" edge to MembersClass entities by IDs.
func (mu *MemberUpdate) RemoveMembersClassIDs(ids ...int) *MemberUpdate {
	mu.mutation.RemoveMembersClassIDs(ids...)
	return mu
}

// RemoveMembersClasses removes "members_classes" edges to MembersClass entities.
func (mu *MemberUpdate) RemoveMembersClasses(m ...*MembersClass) *MemberUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mu.RemoveMembersClassIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mu *MemberUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	mu.defaults()
	if len(mu.hooks) == 0 {
		if err = mu.check(); err != nil {
			return 0, err
		}
		affected, err = mu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MemberMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = mu.check(); err != nil {
				return 0, err
			}
			mu.mutation = mutation
			affected, err = mu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(mu.hooks) - 1; i >= 0; i-- {
			if mu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = mu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (mu *MemberUpdate) SaveX(ctx context.Context) int {
	affected, err := mu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mu *MemberUpdate) Exec(ctx context.Context) error {
	_, err := mu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mu *MemberUpdate) ExecX(ctx context.Context) {
	if err := mu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mu *MemberUpdate) defaults() {
	if _, ok := mu.mutation.UpdateTime(); !ok {
		v := member.UpdateDefaultUpdateTime()
		mu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mu *MemberUpdate) check() error {
	if v, ok := mu.mutation.Gender(); ok {
		if err := member.GenderValidator(v); err != nil {
			return &ValidationError{Name: "gender", err: fmt.Errorf(`ent: validator failed for field "Member.gender": %w`, err)}
		}
	}
	return nil
}

func (mu *MemberUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   member.Table,
			Columns: member.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: member.FieldID,
			},
		},
	}
	if ps := mu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: member.FieldUpdateTime,
		})
	}
	if value, ok := mu.mutation.Number(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: member.FieldNumber,
		})
	}
	if value, ok := mu.mutation.AddedNumber(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: member.FieldNumber,
		})
	}
	if value, ok := mu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: member.FieldName,
		})
	}
	if value, ok := mu.mutation.Kana(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: member.FieldKana,
		})
	}
	if value, ok := mu.mutation.Gender(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: member.FieldGender,
		})
	}
	if value, ok := mu.mutation.DateOfBirth(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: member.FieldDateOfBirth,
		})
	}
	if mu.mutation.DateOfBirthCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: member.FieldDateOfBirth,
		})
	}
	if value, ok := mu.mutation.PhoneNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: member.FieldPhoneNumber,
		})
	}
	if mu.mutation.PhoneNumberCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: member.FieldPhoneNumber,
		})
	}
	if value, ok := mu.mutation.Email(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: member.FieldEmail,
		})
	}
	if mu.mutation.EmailCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: member.FieldEmail,
		})
	}
	if value, ok := mu.mutation.DateOfAdmission(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: member.FieldDateOfAdmission,
		})
	}
	if value, ok := mu.mutation.DateOfWithdrawal(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: member.FieldDateOfWithdrawal,
		})
	}
	if mu.mutation.DateOfWithdrawalCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: member.FieldDateOfWithdrawal,
		})
	}
	if value, ok := mu.mutation.Memo(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: member.FieldMemo,
		})
	}
	if mu.mutation.MemoCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: member.FieldMemo,
		})
	}
	if mu.mutation.MembersClassesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   member.MembersClassesTable,
			Columns: []string{member.MembersClassesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: membersclass.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RemovedMembersClassesIDs(); len(nodes) > 0 && !mu.mutation.MembersClassesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   member.MembersClassesTable,
			Columns: []string{member.MembersClassesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: membersclass.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.MembersClassesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   member.MembersClassesTable,
			Columns: []string{member.MembersClassesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: membersclass.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{member.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// MemberUpdateOne is the builder for updating a single Member entity.
type MemberUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MemberMutation
}

// SetUpdateTime sets the "update_time" field.
func (muo *MemberUpdateOne) SetUpdateTime(t time.Time) *MemberUpdateOne {
	muo.mutation.SetUpdateTime(t)
	return muo
}

// SetNumber sets the "number" field.
func (muo *MemberUpdateOne) SetNumber(i int) *MemberUpdateOne {
	muo.mutation.ResetNumber()
	muo.mutation.SetNumber(i)
	return muo
}

// AddNumber adds i to the "number" field.
func (muo *MemberUpdateOne) AddNumber(i int) *MemberUpdateOne {
	muo.mutation.AddNumber(i)
	return muo
}

// SetName sets the "name" field.
func (muo *MemberUpdateOne) SetName(s string) *MemberUpdateOne {
	muo.mutation.SetName(s)
	return muo
}

// SetKana sets the "kana" field.
func (muo *MemberUpdateOne) SetKana(s string) *MemberUpdateOne {
	muo.mutation.SetKana(s)
	return muo
}

// SetGender sets the "gender" field.
func (muo *MemberUpdateOne) SetGender(m member.Gender) *MemberUpdateOne {
	muo.mutation.SetGender(m)
	return muo
}

// SetDateOfBirth sets the "date_of_birth" field.
func (muo *MemberUpdateOne) SetDateOfBirth(t time.Time) *MemberUpdateOne {
	muo.mutation.SetDateOfBirth(t)
	return muo
}

// SetNillableDateOfBirth sets the "date_of_birth" field if the given value is not nil.
func (muo *MemberUpdateOne) SetNillableDateOfBirth(t *time.Time) *MemberUpdateOne {
	if t != nil {
		muo.SetDateOfBirth(*t)
	}
	return muo
}

// ClearDateOfBirth clears the value of the "date_of_birth" field.
func (muo *MemberUpdateOne) ClearDateOfBirth() *MemberUpdateOne {
	muo.mutation.ClearDateOfBirth()
	return muo
}

// SetPhoneNumber sets the "phone_number" field.
func (muo *MemberUpdateOne) SetPhoneNumber(s string) *MemberUpdateOne {
	muo.mutation.SetPhoneNumber(s)
	return muo
}

// SetNillablePhoneNumber sets the "phone_number" field if the given value is not nil.
func (muo *MemberUpdateOne) SetNillablePhoneNumber(s *string) *MemberUpdateOne {
	if s != nil {
		muo.SetPhoneNumber(*s)
	}
	return muo
}

// ClearPhoneNumber clears the value of the "phone_number" field.
func (muo *MemberUpdateOne) ClearPhoneNumber() *MemberUpdateOne {
	muo.mutation.ClearPhoneNumber()
	return muo
}

// SetEmail sets the "email" field.
func (muo *MemberUpdateOne) SetEmail(s string) *MemberUpdateOne {
	muo.mutation.SetEmail(s)
	return muo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (muo *MemberUpdateOne) SetNillableEmail(s *string) *MemberUpdateOne {
	if s != nil {
		muo.SetEmail(*s)
	}
	return muo
}

// ClearEmail clears the value of the "email" field.
func (muo *MemberUpdateOne) ClearEmail() *MemberUpdateOne {
	muo.mutation.ClearEmail()
	return muo
}

// SetDateOfAdmission sets the "date_of_admission" field.
func (muo *MemberUpdateOne) SetDateOfAdmission(t time.Time) *MemberUpdateOne {
	muo.mutation.SetDateOfAdmission(t)
	return muo
}

// SetDateOfWithdrawal sets the "date_of_withdrawal" field.
func (muo *MemberUpdateOne) SetDateOfWithdrawal(t time.Time) *MemberUpdateOne {
	muo.mutation.SetDateOfWithdrawal(t)
	return muo
}

// SetNillableDateOfWithdrawal sets the "date_of_withdrawal" field if the given value is not nil.
func (muo *MemberUpdateOne) SetNillableDateOfWithdrawal(t *time.Time) *MemberUpdateOne {
	if t != nil {
		muo.SetDateOfWithdrawal(*t)
	}
	return muo
}

// ClearDateOfWithdrawal clears the value of the "date_of_withdrawal" field.
func (muo *MemberUpdateOne) ClearDateOfWithdrawal() *MemberUpdateOne {
	muo.mutation.ClearDateOfWithdrawal()
	return muo
}

// SetMemo sets the "memo" field.
func (muo *MemberUpdateOne) SetMemo(s string) *MemberUpdateOne {
	muo.mutation.SetMemo(s)
	return muo
}

// SetNillableMemo sets the "memo" field if the given value is not nil.
func (muo *MemberUpdateOne) SetNillableMemo(s *string) *MemberUpdateOne {
	if s != nil {
		muo.SetMemo(*s)
	}
	return muo
}

// ClearMemo clears the value of the "memo" field.
func (muo *MemberUpdateOne) ClearMemo() *MemberUpdateOne {
	muo.mutation.ClearMemo()
	return muo
}

// AddMembersClassIDs adds the "members_classes" edge to the MembersClass entity by IDs.
func (muo *MemberUpdateOne) AddMembersClassIDs(ids ...int) *MemberUpdateOne {
	muo.mutation.AddMembersClassIDs(ids...)
	return muo
}

// AddMembersClasses adds the "members_classes" edges to the MembersClass entity.
func (muo *MemberUpdateOne) AddMembersClasses(m ...*MembersClass) *MemberUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return muo.AddMembersClassIDs(ids...)
}

// Mutation returns the MemberMutation object of the builder.
func (muo *MemberUpdateOne) Mutation() *MemberMutation {
	return muo.mutation
}

// ClearMembersClasses clears all "members_classes" edges to the MembersClass entity.
func (muo *MemberUpdateOne) ClearMembersClasses() *MemberUpdateOne {
	muo.mutation.ClearMembersClasses()
	return muo
}

// RemoveMembersClassIDs removes the "members_classes" edge to MembersClass entities by IDs.
func (muo *MemberUpdateOne) RemoveMembersClassIDs(ids ...int) *MemberUpdateOne {
	muo.mutation.RemoveMembersClassIDs(ids...)
	return muo
}

// RemoveMembersClasses removes "members_classes" edges to MembersClass entities.
func (muo *MemberUpdateOne) RemoveMembersClasses(m ...*MembersClass) *MemberUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return muo.RemoveMembersClassIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (muo *MemberUpdateOne) Select(field string, fields ...string) *MemberUpdateOne {
	muo.fields = append([]string{field}, fields...)
	return muo
}

// Save executes the query and returns the updated Member entity.
func (muo *MemberUpdateOne) Save(ctx context.Context) (*Member, error) {
	var (
		err  error
		node *Member
	)
	muo.defaults()
	if len(muo.hooks) == 0 {
		if err = muo.check(); err != nil {
			return nil, err
		}
		node, err = muo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MemberMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = muo.check(); err != nil {
				return nil, err
			}
			muo.mutation = mutation
			node, err = muo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(muo.hooks) - 1; i >= 0; i-- {
			if muo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = muo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, muo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (muo *MemberUpdateOne) SaveX(ctx context.Context) *Member {
	node, err := muo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (muo *MemberUpdateOne) Exec(ctx context.Context) error {
	_, err := muo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muo *MemberUpdateOne) ExecX(ctx context.Context) {
	if err := muo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (muo *MemberUpdateOne) defaults() {
	if _, ok := muo.mutation.UpdateTime(); !ok {
		v := member.UpdateDefaultUpdateTime()
		muo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (muo *MemberUpdateOne) check() error {
	if v, ok := muo.mutation.Gender(); ok {
		if err := member.GenderValidator(v); err != nil {
			return &ValidationError{Name: "gender", err: fmt.Errorf(`ent: validator failed for field "Member.gender": %w`, err)}
		}
	}
	return nil
}

func (muo *MemberUpdateOne) sqlSave(ctx context.Context) (_node *Member, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   member.Table,
			Columns: member.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: member.FieldID,
			},
		},
	}
	id, ok := muo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Member.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := muo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, member.FieldID)
		for _, f := range fields {
			if !member.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != member.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := muo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := muo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: member.FieldUpdateTime,
		})
	}
	if value, ok := muo.mutation.Number(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: member.FieldNumber,
		})
	}
	if value, ok := muo.mutation.AddedNumber(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: member.FieldNumber,
		})
	}
	if value, ok := muo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: member.FieldName,
		})
	}
	if value, ok := muo.mutation.Kana(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: member.FieldKana,
		})
	}
	if value, ok := muo.mutation.Gender(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: member.FieldGender,
		})
	}
	if value, ok := muo.mutation.DateOfBirth(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: member.FieldDateOfBirth,
		})
	}
	if muo.mutation.DateOfBirthCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: member.FieldDateOfBirth,
		})
	}
	if value, ok := muo.mutation.PhoneNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: member.FieldPhoneNumber,
		})
	}
	if muo.mutation.PhoneNumberCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: member.FieldPhoneNumber,
		})
	}
	if value, ok := muo.mutation.Email(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: member.FieldEmail,
		})
	}
	if muo.mutation.EmailCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: member.FieldEmail,
		})
	}
	if value, ok := muo.mutation.DateOfAdmission(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: member.FieldDateOfAdmission,
		})
	}
	if value, ok := muo.mutation.DateOfWithdrawal(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: member.FieldDateOfWithdrawal,
		})
	}
	if muo.mutation.DateOfWithdrawalCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: member.FieldDateOfWithdrawal,
		})
	}
	if value, ok := muo.mutation.Memo(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: member.FieldMemo,
		})
	}
	if muo.mutation.MemoCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: member.FieldMemo,
		})
	}
	if muo.mutation.MembersClassesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   member.MembersClassesTable,
			Columns: []string{member.MembersClassesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: membersclass.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RemovedMembersClassesIDs(); len(nodes) > 0 && !muo.mutation.MembersClassesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   member.MembersClassesTable,
			Columns: []string{member.MembersClassesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: membersclass.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.MembersClassesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   member.MembersClassesTable,
			Columns: []string{member.MembersClassesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: membersclass.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Member{config: muo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, muo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{member.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
