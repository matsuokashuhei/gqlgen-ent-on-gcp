// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/matsuokashuhei/landin/ent/predicate"
	"github.com/matsuokashuhei/landin/ent/room"
	"github.com/matsuokashuhei/landin/ent/school"
	"github.com/matsuokashuhei/landin/ent/studio"
)

// StudioUpdate is the builder for updating Studio entities.
type StudioUpdate struct {
	config
	hooks    []Hook
	mutation *StudioMutation
}

// Where appends a list predicates to the StudioUpdate builder.
func (su *StudioUpdate) Where(ps ...predicate.Studio) *StudioUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetUpdateTime sets the "update_time" field.
func (su *StudioUpdate) SetUpdateTime(t time.Time) *StudioUpdate {
	su.mutation.SetUpdateTime(t)
	return su
}

// SetName sets the "name" field.
func (su *StudioUpdate) SetName(s string) *StudioUpdate {
	su.mutation.SetName(s)
	return su
}

// SetLocation sets the "location" field.
func (su *StudioUpdate) SetLocation(s string) *StudioUpdate {
	su.mutation.SetLocation(s)
	return su
}

// SetSchoolID sets the "school" edge to the School entity by ID.
func (su *StudioUpdate) SetSchoolID(id int) *StudioUpdate {
	su.mutation.SetSchoolID(id)
	return su
}

// SetNillableSchoolID sets the "school" edge to the School entity by ID if the given value is not nil.
func (su *StudioUpdate) SetNillableSchoolID(id *int) *StudioUpdate {
	if id != nil {
		su = su.SetSchoolID(*id)
	}
	return su
}

// SetSchool sets the "school" edge to the School entity.
func (su *StudioUpdate) SetSchool(s *School) *StudioUpdate {
	return su.SetSchoolID(s.ID)
}

// AddRoomIDs adds the "rooms" edge to the Room entity by IDs.
func (su *StudioUpdate) AddRoomIDs(ids ...int) *StudioUpdate {
	su.mutation.AddRoomIDs(ids...)
	return su
}

// AddRooms adds the "rooms" edges to the Room entity.
func (su *StudioUpdate) AddRooms(r ...*Room) *StudioUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return su.AddRoomIDs(ids...)
}

// Mutation returns the StudioMutation object of the builder.
func (su *StudioUpdate) Mutation() *StudioMutation {
	return su.mutation
}

// ClearSchool clears the "school" edge to the School entity.
func (su *StudioUpdate) ClearSchool() *StudioUpdate {
	su.mutation.ClearSchool()
	return su
}

// ClearRooms clears all "rooms" edges to the Room entity.
func (su *StudioUpdate) ClearRooms() *StudioUpdate {
	su.mutation.ClearRooms()
	return su
}

// RemoveRoomIDs removes the "rooms" edge to Room entities by IDs.
func (su *StudioUpdate) RemoveRoomIDs(ids ...int) *StudioUpdate {
	su.mutation.RemoveRoomIDs(ids...)
	return su
}

// RemoveRooms removes "rooms" edges to Room entities.
func (su *StudioUpdate) RemoveRooms(r ...*Room) *StudioUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return su.RemoveRoomIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *StudioUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	su.defaults()
	if len(su.hooks) == 0 {
		affected, err = su.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*StudioMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			su.mutation = mutation
			affected, err = su.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(su.hooks) - 1; i >= 0; i-- {
			if su.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = su.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, su.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (su *StudioUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *StudioUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *StudioUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (su *StudioUpdate) defaults() {
	if _, ok := su.mutation.UpdateTime(); !ok {
		v := studio.UpdateDefaultUpdateTime()
		su.mutation.SetUpdateTime(v)
	}
}

func (su *StudioUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   studio.Table,
			Columns: studio.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: studio.FieldID,
			},
		},
	}
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: studio.FieldUpdateTime,
		})
	}
	if value, ok := su.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: studio.FieldName,
		})
	}
	if value, ok := su.mutation.Location(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: studio.FieldLocation,
		})
	}
	if su.mutation.SchoolCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   studio.SchoolTable,
			Columns: []string{studio.SchoolColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: school.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.SchoolIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   studio.SchoolTable,
			Columns: []string{studio.SchoolColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: school.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.RoomsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   studio.RoomsTable,
			Columns: []string{studio.RoomsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: room.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedRoomsIDs(); len(nodes) > 0 && !su.mutation.RoomsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   studio.RoomsTable,
			Columns: []string{studio.RoomsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: room.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RoomsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   studio.RoomsTable,
			Columns: []string{studio.RoomsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: room.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{studio.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// StudioUpdateOne is the builder for updating a single Studio entity.
type StudioUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *StudioMutation
}

// SetUpdateTime sets the "update_time" field.
func (suo *StudioUpdateOne) SetUpdateTime(t time.Time) *StudioUpdateOne {
	suo.mutation.SetUpdateTime(t)
	return suo
}

// SetName sets the "name" field.
func (suo *StudioUpdateOne) SetName(s string) *StudioUpdateOne {
	suo.mutation.SetName(s)
	return suo
}

// SetLocation sets the "location" field.
func (suo *StudioUpdateOne) SetLocation(s string) *StudioUpdateOne {
	suo.mutation.SetLocation(s)
	return suo
}

// SetSchoolID sets the "school" edge to the School entity by ID.
func (suo *StudioUpdateOne) SetSchoolID(id int) *StudioUpdateOne {
	suo.mutation.SetSchoolID(id)
	return suo
}

// SetNillableSchoolID sets the "school" edge to the School entity by ID if the given value is not nil.
func (suo *StudioUpdateOne) SetNillableSchoolID(id *int) *StudioUpdateOne {
	if id != nil {
		suo = suo.SetSchoolID(*id)
	}
	return suo
}

// SetSchool sets the "school" edge to the School entity.
func (suo *StudioUpdateOne) SetSchool(s *School) *StudioUpdateOne {
	return suo.SetSchoolID(s.ID)
}

// AddRoomIDs adds the "rooms" edge to the Room entity by IDs.
func (suo *StudioUpdateOne) AddRoomIDs(ids ...int) *StudioUpdateOne {
	suo.mutation.AddRoomIDs(ids...)
	return suo
}

// AddRooms adds the "rooms" edges to the Room entity.
func (suo *StudioUpdateOne) AddRooms(r ...*Room) *StudioUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return suo.AddRoomIDs(ids...)
}

// Mutation returns the StudioMutation object of the builder.
func (suo *StudioUpdateOne) Mutation() *StudioMutation {
	return suo.mutation
}

// ClearSchool clears the "school" edge to the School entity.
func (suo *StudioUpdateOne) ClearSchool() *StudioUpdateOne {
	suo.mutation.ClearSchool()
	return suo
}

// ClearRooms clears all "rooms" edges to the Room entity.
func (suo *StudioUpdateOne) ClearRooms() *StudioUpdateOne {
	suo.mutation.ClearRooms()
	return suo
}

// RemoveRoomIDs removes the "rooms" edge to Room entities by IDs.
func (suo *StudioUpdateOne) RemoveRoomIDs(ids ...int) *StudioUpdateOne {
	suo.mutation.RemoveRoomIDs(ids...)
	return suo
}

// RemoveRooms removes "rooms" edges to Room entities.
func (suo *StudioUpdateOne) RemoveRooms(r ...*Room) *StudioUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return suo.RemoveRoomIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *StudioUpdateOne) Select(field string, fields ...string) *StudioUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Studio entity.
func (suo *StudioUpdateOne) Save(ctx context.Context) (*Studio, error) {
	var (
		err  error
		node *Studio
	)
	suo.defaults()
	if len(suo.hooks) == 0 {
		node, err = suo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*StudioMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			suo.mutation = mutation
			node, err = suo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(suo.hooks) - 1; i >= 0; i-- {
			if suo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = suo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, suo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (suo *StudioUpdateOne) SaveX(ctx context.Context) *Studio {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *StudioUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *StudioUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (suo *StudioUpdateOne) defaults() {
	if _, ok := suo.mutation.UpdateTime(); !ok {
		v := studio.UpdateDefaultUpdateTime()
		suo.mutation.SetUpdateTime(v)
	}
}

func (suo *StudioUpdateOne) sqlSave(ctx context.Context) (_node *Studio, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   studio.Table,
			Columns: studio.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: studio.FieldID,
			},
		},
	}
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Studio.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, studio.FieldID)
		for _, f := range fields {
			if !studio.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != studio.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: studio.FieldUpdateTime,
		})
	}
	if value, ok := suo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: studio.FieldName,
		})
	}
	if value, ok := suo.mutation.Location(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: studio.FieldLocation,
		})
	}
	if suo.mutation.SchoolCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   studio.SchoolTable,
			Columns: []string{studio.SchoolColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: school.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.SchoolIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   studio.SchoolTable,
			Columns: []string{studio.SchoolColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: school.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.RoomsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   studio.RoomsTable,
			Columns: []string{studio.RoomsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: room.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedRoomsIDs(); len(nodes) > 0 && !suo.mutation.RoomsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   studio.RoomsTable,
			Columns: []string{studio.RoomsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: room.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RoomsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   studio.RoomsTable,
			Columns: []string{studio.RoomsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: room.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Studio{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{studio.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
