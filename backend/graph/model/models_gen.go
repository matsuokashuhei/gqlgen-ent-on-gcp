// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

type CreateClassInput struct {
	Name         string     `json:"name"`
	Level        string     `json:"level"`
	Tuition      int        `json:"tuition"`
	ScheduleID   int        `json:"scheduleId"`
	InstructorID int        `json:"instructorId"`
	StartDate    time.Time  `json:"startDate"`
	EndDate      *time.Time `json:"endDate"`
}

type CreateInstructorInput struct {
	Name        string  `json:"name"`
	Kana        string  `json:"kana"`
	Biography   *string `json:"biography"`
	PhoneNumber *string `json:"phoneNumber"`
	Email       *string `json:"email"`
}

type CreateMemberInput struct {
	Name             string     `json:"name"`
	Number           int        `json:"number"`
	Kana             string     `json:"kana"`
	Gender           Gender     `json:"gender"`
	DateOfBirth      *time.Time `json:"dateOfBirth"`
	PhoneNumber      *string    `json:"phoneNumber"`
	Email            *string    `json:"email"`
	DateOfAdmission  time.Time  `json:"dateOfAdmission"`
	DateOfWithdrawal *time.Time `json:"dateOfWithdrawal"`
	Memo             *string    `json:"memo"`
}

type CreateRoomInput struct {
	Name     string `json:"name"`
	Capacity int    `json:"capacity"`
	StudioID int    `json:"studioID"`
}

type CreateSchoolInput struct {
	Name string `json:"name"`
}

type CreateStudioInput struct {
	Name     string `json:"name"`
	Location string `json:"location"`
	SchoolID int    `json:"schoolID"`
}

type CreateUserInput struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

type DeleteInstructorInput struct {
	ID int `json:"id"`
}

type DeleteMemberInput struct {
	ID int `json:"id"`
}

type SignUpInput struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

type UpdateClassInput struct {
	ID           int        `json:"id"`
	Name         *string    `json:"name"`
	Level        *string    `json:"level"`
	Tuition      *int       `json:"tuition"`
	ScheduleID   *int       `json:"scheduleId"`
	InstructorID *int       `json:"instructorId"`
	StartDate    *time.Time `json:"startDate"`
	EndDate      *time.Time `json:"endDate"`
}

type UpdateInstructorInput struct {
	ID          int     `json:"id"`
	Name        *string `json:"name"`
	Kana        *string `json:"kana"`
	Biography   *string `json:"biography"`
	PhoneNumber *string `json:"phoneNumber"`
	Email       *string `json:"email"`
}

type UpdateMemberInput struct {
	ID               int        `json:"id"`
	Number           *int       `json:"number"`
	Name             *string    `json:"name"`
	Kana             *string    `json:"kana"`
	Gender           *Gender    `json:"gender"`
	DateOfBirth      *time.Time `json:"dateOfBirth"`
	PhoneNumber      *string    `json:"phoneNumber"`
	Email            *string    `json:"email"`
	DateOfAdmission  *time.Time `json:"dateOfAdmission"`
	DateOfWithdrawal *time.Time `json:"dateOfWithdrawal"`
	Memo             *string    `json:"memo"`
}

type UpdateRoomInput struct {
	ID       int     `json:"id"`
	Name     *string `json:"name"`
	Capacity *int    `json:"capacity"`
	StudioID *int    `json:"studioID"`
}

type UpdateSchoolInput struct {
	ID   int    `json:"id"`
	Name string `json:"name"`
}

type UpdateStudioInput struct {
	ID       int     `json:"id"`
	Name     *string `json:"name"`
	Location *string `json:"location"`
	SchoolID *int    `json:"schoolID"`
}

type UpdateUserInput struct {
	ID   int    `json:"id"`
	Name string `json:"name"`
}

type Gender string

const (
	GenderMale   Gender = "MALE"
	GenderFemale Gender = "FEMALE"
	GenderOther  Gender = "OTHER"
)

var AllGender = []Gender{
	GenderMale,
	GenderFemale,
	GenderOther,
}

func (e Gender) IsValid() bool {
	switch e {
	case GenderMale, GenderFemale, GenderOther:
		return true
	}
	return false
}

func (e Gender) String() string {
	return string(e)
}

func (e *Gender) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Gender(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Gender", str)
	}
	return nil
}

func (e Gender) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ScheduleField string

const (
	ScheduleFieldDayOfWeek ScheduleField = "DAY_OF_WEEK"
	ScheduleFieldStartTime ScheduleField = "START_TIME"
)

var AllScheduleField = []ScheduleField{
	ScheduleFieldDayOfWeek,
	ScheduleFieldStartTime,
}

func (e ScheduleField) IsValid() bool {
	switch e {
	case ScheduleFieldDayOfWeek, ScheduleFieldStartTime:
		return true
	}
	return false
}

func (e ScheduleField) String() string {
	return string(e)
}

func (e *ScheduleField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ScheduleField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ScheduleField", str)
	}
	return nil
}

func (e ScheduleField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
