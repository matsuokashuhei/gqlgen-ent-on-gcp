type Instructor implements Node {
  id: ID!
  name: String!
  kana: String!
  biography: String
  phoneNumber: String
  email: String
  createTime: Time!
  updateTime: Time!
}

type InstructorConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [InstructorEdge!]!
}

type InstructorEdge {
  node: Instructor!
  cursor: Cursor!
}

enum InstructorOrderField {
  KANA
}

input InstructorOrder {
  direction: OrderDirection!
  field: InstructorOrderField
}

input CreateInstructorInput {
  name: String!
  kana: String!
  biography: String
  phoneNumber: String
  email: String
}

input UpdateInstructorInput {
  id: ID!
  name: String
  kana: String
  biography: String
  phoneNumber: String
  email: String
}

input DeleteInstructorInput {
  id: ID!
}

extend type Query {
  instructor(id: ID!): Instructor!
  instructors(after: Cursor, first: Int, before: Cursor, last: Int, orderBy: InstructorOrder): InstructorConnection!
}

extend type Mutation {
  createInstructor(input: CreateInstructorInput!): Instructor!
  updateInstructor(input: UpdateInstructorInput!): Instructor!
  deleteInstructor(input: DeleteInstructorInput!): Instructor!
}
